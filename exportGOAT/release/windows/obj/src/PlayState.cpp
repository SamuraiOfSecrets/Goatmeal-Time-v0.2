// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_ConvertScore
#include <ConvertScore.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveDirection
#include <flixel/addons/effects/chainable/FlxWaveDirection.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveMode
#include <flixel/addons/effects/chainable/FlxWaveMode.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_67_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",67,0xb30d7781)
static const ::String _hx_array_data_46c2835d_1[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_218_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",218,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_219_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",219,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_223_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",223,0xb30d7781)
static const ::String _hx_array_data_46c2835d_12[] = {
	HX_("HEY!",e5,05,cc,2f),HX_("You think you can just sing\nwith my daughter like that?",06,7c,81,d3),HX_("If you want to date her...",32,0f,35,a9),HX_("You're going to have to go \nthrough ME first!",25,9e,05,cd),
};
static const ::String _hx_array_data_46c2835d_13[] = {
	HX_("gah you think you're hot stuff?",e2,4c,78,fe),HX_("If you can beat me here...",ac,b1,a2,9f),HX_("Only then I will even CONSIDER letting you\ndate my daughter!",ac,04,01,81),
};
static const ::String _hx_array_data_46c2835d_14[] = {
	HX_("Not too shabby boy.",dc,48,a8,f0),HX_("",00,00,00,00),
};
static const ::String _hx_array_data_46c2835d_15[] = {
	HX_("Hey you're pretty cute.",02,ae,61,fa),HX_("Use the arrow keys to keep up \nwith me singing.",91,5e,d0,ea),
};
static const int _hx_array_data_46c2835d_16[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1137_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1130_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1121_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1121,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1202_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1202,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1220_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1220,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1235_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1235,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1230_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1230,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1240_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1175_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1175,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1291_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1291,0xb30d7781)
static const ::String _hx_array_data_46c2835d_28[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_29[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_46c2835d_30[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1340_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1340,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1357_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1357,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1376_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1376,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1268_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1268,0xb30d7781)
static const int _hx_array_data_46c2835d_35[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1396_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1396,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1461_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1461,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1579_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1579,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1584_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1584,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1721_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1721,0xb30d7781)
static const int _hx_array_data_46c2835d_51[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_52[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_53[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_54[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_55[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_56[] = {
	(int)4,(int)8,
};
static const int _hx_array_data_46c2835d_57[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_58[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_59[] = {
	(int)5,(int)9,
};
static const int _hx_array_data_46c2835d_60[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_61[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_62[] = {
	(int)6,(int)10,
};
static const int _hx_array_data_46c2835d_63[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_64[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_65[] = {
	(int)7,(int)11,
};
static const int _hx_array_data_46c2835d_66[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1730_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",1730,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1734_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1734,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1754_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1754,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1783_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1783,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2505_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2505,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1805_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1805,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2309_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2309,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2418_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2418,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2523_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2523,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2661_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2661,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2908_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2908,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2917_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2917,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2890_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2890,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2936_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",2936,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3081_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3081,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3111_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2945_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2945,0xb30d7781)
static const bool _hx_array_data_46c2835d_101[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_102[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_103[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2973_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2973,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2989_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2989,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3025_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3025,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3130_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",3130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3195_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",3195,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3208_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3211_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3211,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3203_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",3203,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3225_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",3225,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3272_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3272,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3326_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",3326,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3348_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",3348,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3357_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3357,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3365_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",3365,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3379_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",3379,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3390_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",3390,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3419_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",3419,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3432_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",3432,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3444_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",3444,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3482_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3482,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3487_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3487,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3584_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3584,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3599_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",3599,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_69_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",69,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_71_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",71,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_73_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",73,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_74_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",74,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_75_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",75,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_76_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",76,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_77_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",77,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_78_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",78,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_79_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",79,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_80_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",80,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",81,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_87_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",87,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_89_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",89,0xb30d7781)
static const bool _hx_array_data_46c2835d_141[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_120_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",120,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_121_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",121,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_122_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",122,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_130_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_151_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",151,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_187_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",187,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_191_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",191,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_193_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",193,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_196_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",196,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_197_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",197,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_199_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",199,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_200_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",200,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_208_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1264_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1264,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1802_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1802,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_67_new)
HXLINE(3627)		this->curLight = 0;
HXLINE(3479)		this->lightningOffset = 8;
HXLINE(3478)		this->lightningStrikeBeat = 0;
HXLINE(3386)		this->startedMoving = false;
HXLINE(3375)		this->trainCooldown = 0;
HXLINE(3374)		this->trainFinishing = false;
HXLINE(3373)		this->trainCars = 8;
HXLINE(3371)		this->trainFrameTiming = ((Float)0);
HXLINE(3370)		this->trainMoving = false;
HXLINE(3344)		this->fastCarCanDrive = true;
HXLINE(3222)		this->etternaModeScore = 0;
HXLINE(3220)		this->mashViolations = 0;
HXLINE(3219)		this->mashing = 0;
HXLINE(2942)		this->leftHold = false;
HXLINE(2941)		this->rightHold = false;
HXLINE(2940)		this->downHold = false;
HXLINE(2939)		this->upHold = false;
HXLINE(2658)		this->currentTimingShown = null();
HXLINE(2657)		this->timeShown = 0;
HXLINE(2655)		this->offsetTest = ((Float)0);
HXLINE(2654)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(2652)		this->endingSong = false;
HXLINE(1800)		this->maxNPS = 0;
HXLINE(1799)		this->nps = 0;
HXLINE(1798)		this->canPause = true;
HXLINE(1797)		this->startedCountdown = false;
HXLINE(1796)		this->paused = false;
HXLINE(1458)		this->debugNum = 0;
HXLINE(1393)		this->songStarted = false;
HXLINE(1390)		this->songTime = ((Float)0);
HXLINE(1389)		this->lastReportedPlayheadPosition = 0;
HXLINE(1388)		this->previousFrameTime = 0;
HXLINE(1261)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1259)		this->perfectMode = false;
HXLINE( 214)		this->executeModchart = false;
HXLINE( 212)		this->saveNotes = ::Array_obj< Float >::__new(0);
HXLINE( 206)		this->allowedToHeadbang = false;
HXLINE( 203)		this->triggeredAlready = false;
HXLINE( 195)		this->inCutscene = false;
HXLINE( 189)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 183)		this->songScoreDef = 0;
HXLINE( 182)		this->songScore = 0;
HXLINE( 181)		this->talking = true;
HXLINE( 179)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 176)		this->fc = true;
HXLINE( 159)		this->isHalloween = false;
HXLINE( 156)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_1,2);
HXLINE( 154)		this->currentFrames = 0;
HXLINE( 153)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 144)		this->startingSong = false;
HXLINE( 143)		this->generatedMusic = false;
HXLINE( 141)		this->songPositionBar = ((Float)0);
HXLINE( 136)		this->ss = false;
HXLINE( 135)		this->totalPlayed = 0;
HXLINE( 134)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 133)		this->totalNotesHit = ((Float)0);
HXLINE( 132)		this->accuracyDefault = ((Float)0.00);
HXLINE( 131)		this->accuracy = ((Float)0.00);
HXLINE( 129)		this->combo = 0;
HXLINE( 128)		this->health = ((Float)1);
HXLINE( 127)		this->gfSpeed = 1;
HXLINE( 125)		this->curSong = HX_("",00,00,00,00);
HXLINE( 124)		this->camZooming = false;
HXLINE( 114)		this->curSection = 0;
HXLINE( 111)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 101)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 100)		this->detailsText = HX_("",00,00,00,00);
HXLINE(  99)		this->iconRPC = HX_("",00,00,00,00);
HXLINE(  98)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE(  93)		this->songLength = ((Float)0);
HXLINE(  91)		this->halloweenLevel = false;
HXLINE(  67)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_218_addObject)
HXDLIN( 218)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_219_removeObject)
HXDLIN( 219)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_223_create)
HXLINE( 222)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 224)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 226)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 227)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 229)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 230)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 230)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 232)		::PlayState_obj::sicks = 0;
HXLINE( 233)		::PlayState_obj::bads = 0;
HXLINE( 234)		::PlayState_obj::shits = 0;
HXLINE( 235)		::PlayState_obj::goods = 0;
HXLINE( 237)		::PlayState_obj::misses = 0;
HXLINE( 239)		::PlayState_obj::repPresses = 0;
HXLINE( 240)		::PlayState_obj::repReleases = 0;
HXLINE( 243)		::String library = null();
HXDLIN( 243)		this->executeModchart = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 249)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 249)		::String _hx_tmp1 = ((HX_("Mod chart: ",86,c7,46,7f) + ::Std_obj::string(this->executeModchart)) + HX_(" - ",73,6f,18,00));
HXDLIN( 249)		::String library1 = null();
HXDLIN( 249)		::String _hx_tmp2 = (_hx_tmp1 + ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXDLIN( 249)		_hx_tmp(_hx_tmp2,::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),249,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE( 253)		switch((int)(::PlayState_obj::storyDifficulty)){
            			case (int)0: {
HXLINE( 256)				this->storyDifficultyText = HX_("Easy",22,b8,e5,2d);
            			}
            			break;
            			case (int)1: {
HXLINE( 258)				this->storyDifficultyText = HX_("Normal",47,e6,fd,64);
            			}
            			break;
            			case (int)2: {
HXLINE( 260)				this->storyDifficultyText = HX_("Hard",0b,5b,e1,2f);
            			}
            			break;
            		}
HXLINE( 263)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 266)		::String _hx_switch_0 = this->iconRPC;
            		if (  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 273)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 273)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 271)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 271)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 269)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 269)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
HXLINE( 277)		if (::PlayState_obj::isStoryMode) {
HXLINE( 279)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 283)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 287)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 290)		::String _hx_tmp3 = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN( 290)		::String _hx_tmp4 = (_hx_tmp3 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN( 290)		::String _hx_tmp5 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN( 290)		::DiscordClient_obj::changePresence(_hx_tmp4,(((_hx_tmp5 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE( 295)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 296)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 297)		{
HXLINE( 297)			 ::flixel::FlxCamera _hx_tmp6 = this->camHUD;
HXDLIN( 297)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor & 16777215);
HXDLIN( 297)			 ::flixel::FlxCamera _hx_tmp7 = this->camHUD;
HXDLIN( 297)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor | 0);
            		}
HXLINE( 299)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 300)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 302)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 304)		this->persistentUpdate = true;
HXLINE( 305)		this->persistentDraw = true;
HXLINE( 307)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 308)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 310)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 311)		::Conductor_obj::changeBPM(( (int)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 313)		 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN( 313)		::String _hx_tmp9 = ((((((HX_("INFORMATION ABOUT WHAT U PLAYIN WIT:\nFRAMES: ",17,b9,8d,a9) + ::Conductor_obj::safeFrames) + HX_("\nZONE: ",5c,23,60,4c)) + ::Conductor_obj::safeZoneOffset) + HX_("\nTS: ",ef,e6,c6,f9)) + ::Conductor_obj::timeScale) + HX_("\nBotPlay : ",b5,fa,9c,54));
HXDLIN( 313)		::String _hx_tmp10 = (_hx_tmp9 + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic))));
HXDLIN( 313)		_hx_tmp8(_hx_tmp10,::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),313,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE( 316)		::String _hx_switch_1 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_1==HX_("bopeebo",b0,01,c5,0c)) ){
HXLINE( 321)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_12,4);
HXDLIN( 321)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("dad battle",f1,cd,cf,ea)) ){
HXLINE( 330)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_13,3);
HXDLIN( 330)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("endless",b4,a0,fb,3e)) ){
HXLINE( 344)			::String library = null();
HXDLIN( 344)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("endless/senpaiDialogue",af,02,07,d2)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 344)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("expurgation",a8,b8,80,42)) ){
HXLINE( 346)			::String library = null();
HXDLIN( 346)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("expurgation/senpaiDialogue",3b,fd,ba,b9)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 346)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("fresh",6e,86,86,06)) ){
HXLINE( 328)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_14,2);
HXDLIN( 328)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("heartbass",a5,02,d7,a4)) ){
HXLINE( 342)			::String library = null();
HXDLIN( 342)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("heartbass/senpaiDialogue",de,77,77,fe)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 342)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("roses",04,6c,64,ed)) ){
HXLINE( 338)			::String library = null();
HXDLIN( 338)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("roses/rosesDialogue",b1,32,46,e4)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 338)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 336)			::String library = null();
HXDLIN( 336)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("senpai/senpaiDialogue",27,5d,40,15)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 336)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 340)			::String library = null();
HXDLIN( 340)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("thorns/thornsDialogue",27,29,d3,ea)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 340)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_1==HX_("tutorial",9e,8f,b5,82)) ){
HXLINE( 319)			this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_15,2);
HXDLIN( 319)			goto _hx_goto_5;
            		}
            		_hx_goto_5:;
HXLINE( 349)		::String _hx_switch_2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		if (  (_hx_switch_2==HX_("bungerTime",e6,3c,36,91)) ){
HXLINE( 620)			::PlayState_obj::curStage = HX_("bungerTime",e6,3c,36,91);
HXLINE( 622)			this->defaultCamZoom = ((Float)0.76);
HXLINE( 623)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,30,0,null());
HXLINE( 624)			::String library = null();
HXDLIN( 624)			bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Goatmeal/Background",bf,64,05,6e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 625)			this->add(bg);
HXLINE( 626)			bg->set_active(false);
HXLINE( 627)			bg->updateHitbox();
HXLINE( 628)			bg->set_antialiasing(true);
HXLINE( 629)			bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 631)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,680,null());
HXDLIN( 631)			::String library1 = null();
HXDLIN( 631)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("Goatmeal/stagefront",dc,c9,e7,17)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 632)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.15))),null());
HXLINE( 633)			stageFront1->updateHitbox();
HXLINE( 634)			stageFront1->set_antialiasing(true);
HXLINE( 635)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 636)			stageFront1->set_active(false);
HXLINE( 637)			this->add(stageFront1);
HXLINE( 659)			this->bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)112.95),198,null());
HXLINE( 660)			 ::flixel::FlxSprite _hx_tmp = this->bottomBoppers;
HXDLIN( 660)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 660)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 661)			this->bottomBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 662)			this->bottomBoppers->set_antialiasing(true);
HXLINE( 663)			this->bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 664)			 ::flixel::FlxSprite _hx_tmp2 = this->bottomBoppers;
HXDLIN( 664)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int(this->bottomBoppers->get_width()),null());
HXLINE( 665)			this->bottomBoppers->updateHitbox();
HXLINE( 666)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 667)				this->add(this->bottomBoppers);
            			}
HXLINE( 619)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("halloween",8d,bb,38,50)) ){
HXLINE( 353)			::PlayState_obj::curStage = HX_("spooky",eb,bd,9e,c1);
HXLINE( 354)			this->halloweenLevel = true;
HXLINE( 356)			::String hallowTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week2",be,95,be,c7));
HXDLIN( 356)			 ::flixel::graphics::frames::FlxAtlasFrames hallowTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(hallowTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week2",be,95,be,c7)));
HXLINE( 358)			this->halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 359)			this->halloweenBG->set_frames(hallowTex1);
HXLINE( 360)			this->halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE( 361)			this->halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE( 362)			this->halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 363)			this->halloweenBG->set_antialiasing(true);
HXLINE( 364)			this->add(this->halloweenBG);
HXLINE( 366)			this->isHalloween = true;
HXLINE( 352)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE( 416)			::PlayState_obj::curStage = HX_("limo",1f,17,b3,47);
HXLINE( 417)			this->defaultCamZoom = ((Float)0.90);
HXLINE( 419)			 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 419)			 ::flixel::FlxSprite skyBG1 = skyBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoSunset",45,de,4f,6e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 420)			skyBG1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 421)			this->add(skyBG1);
HXLINE( 423)			 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 424)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 424)			bgLimo->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7))));
HXLINE( 425)			bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 426)			bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 427)			bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 428)			this->add(bgLimo);
HXLINE( 429)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 430)				this->grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 431)				this->add(this->grpLimoDancers);
HXLINE( 433)				{
HXLINE( 434)					{
HXLINE( 435)						 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 436)						dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 437)						this->grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 434)					{
HXLINE( 435)						 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 436)						dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 437)						this->grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 434)					{
HXLINE( 435)						 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 436)						dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 437)						this->grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 434)					{
HXLINE( 435)						 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 436)						dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 437)						this->grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 434)					{
HXLINE( 435)						 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 436)						dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 437)						this->grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
            					}
            				}
            			}
HXLINE( 441)			 ::flixel::FlxSprite overlayShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-600,null());
HXDLIN( 441)			 ::flixel::FlxSprite overlayShit1 = overlayShit->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoOverlay",01,f0,58,a8)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 442)			overlayShit1->set_alpha(((Float)0.5));
HXLINE( 451)			::String limoTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 451)			 ::flixel::graphics::frames::FlxAtlasFrames limoTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(limoTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7)));
HXLINE( 453)			this->limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 454)			this->limo->set_frames(limoTex1);
HXLINE( 455)			this->limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 456)			this->limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 457)			this->limo->set_antialiasing(true);
HXLINE( 459)			 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXDLIN( 459)			this->fastCar = _hx_tmp1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/fastCarLol",c1,b0,ed,94)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 415)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE( 464)			::PlayState_obj::curStage = HX_("mall",d4,3a,56,48);
HXLINE( 466)			this->defaultCamZoom = ((Float)0.80);
HXLINE( 468)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 468)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgWalls",57,9f,1b,51)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 469)			bg1->set_antialiasing(true);
HXLINE( 470)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 471)			bg1->set_active(false);
HXLINE( 472)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 473)			bg1->updateHitbox();
HXLINE( 474)			this->add(bg1);
HXLINE( 476)			this->upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 477)			 ::flixel::FlxSprite _hx_tmp = this->upperBoppers;
HXDLIN( 477)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 477)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 478)			this->upperBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 479)			this->upperBoppers->set_antialiasing(true);
HXLINE( 480)			this->upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 481)			 ::flixel::FlxSprite _hx_tmp2 = this->upperBoppers;
HXDLIN( 481)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 482)			this->upperBoppers->updateHitbox();
HXLINE( 483)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 484)				this->add(this->upperBoppers);
            			}
HXLINE( 488)			 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 488)			 ::flixel::FlxSprite bgEscalator1 = bgEscalator->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgEscalator",64,1f,c0,d5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 489)			bgEscalator1->set_antialiasing(true);
HXLINE( 490)			bgEscalator1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 491)			bgEscalator1->set_active(false);
HXLINE( 492)			bgEscalator1->setGraphicSize(::Std_obj::_hx_int((bgEscalator1->get_width() * ((Float)0.9))),null());
HXLINE( 493)			bgEscalator1->updateHitbox();
HXLINE( 494)			this->add(bgEscalator1);
HXLINE( 496)			 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 496)			 ::flixel::FlxSprite tree1 = tree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/christmasTree",73,57,6d,7b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 497)			tree1->set_antialiasing(true);
HXLINE( 498)			tree1->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 499)			this->add(tree1);
HXLINE( 501)			this->bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 502)			 ::flixel::FlxSprite _hx_tmp3 = this->bottomBoppers;
HXDLIN( 502)			::String _hx_tmp4 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 502)			_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp4,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 503)			this->bottomBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 504)			this->bottomBoppers->set_antialiasing(true);
HXLINE( 505)			this->bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 506)			 ::flixel::FlxSprite _hx_tmp5 = this->bottomBoppers;
HXDLIN( 506)			_hx_tmp5->setGraphicSize(::Std_obj::_hx_int(this->bottomBoppers->get_width()),null());
HXLINE( 507)			this->bottomBoppers->updateHitbox();
HXLINE( 508)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 509)				this->add(this->bottomBoppers);
            			}
HXLINE( 513)			 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 513)			 ::flixel::FlxSprite fgSnow1 = fgSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/fgSnow",91,40,e7,37)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 514)			fgSnow1->set_active(false);
HXLINE( 515)			fgSnow1->set_antialiasing(true);
HXLINE( 516)			this->add(fgSnow1);
HXLINE( 518)			this->santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 519)			 ::flixel::FlxSprite _hx_tmp6 = this->santa;
HXDLIN( 519)			::String _hx_tmp7 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 519)			_hx_tmp6->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp7,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 520)			this->santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 521)			this->santa->set_antialiasing(true);
HXLINE( 522)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 523)				this->add(this->santa);
            			}
HXLINE( 463)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 528)			::PlayState_obj::curStage = HX_("mallEvil",88,d3,e3,a7);
HXLINE( 529)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 529)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilBG",86,9d,17,83)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 530)			bg1->set_antialiasing(true);
HXLINE( 531)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 532)			bg1->set_active(false);
HXLINE( 533)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 534)			bg1->updateHitbox();
HXLINE( 535)			this->add(bg1);
HXLINE( 537)			 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 537)			 ::flixel::FlxSprite evilTree1 = evilTree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilTree",7f,5b,65,3a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 538)			evilTree1->set_antialiasing(true);
HXLINE( 539)			evilTree1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 540)			this->add(evilTree1);
HXLINE( 542)			 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 542)			 ::flixel::FlxSprite evilSnow1 = evilSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilSnow",a4,24,b9,39)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 543)			evilSnow1->set_antialiasing(true);
HXLINE( 544)			this->add(evilSnow1);
HXLINE( 527)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("philly",28,77,5e,ef)) ){
HXLINE( 370)			::PlayState_obj::curStage = HX_("philly",28,77,5e,ef);
HXLINE( 372)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 372)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/sky",3a,d3,d5,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 373)			bg1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 374)			this->add(bg1);
HXLINE( 376)			 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN( 376)			 ::flixel::FlxSprite city1 = city->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/city",32,0d,ae,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)			city1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)			city1->setGraphicSize(::Std_obj::_hx_int((city1->get_width() * ((Float)0.85))),null());
HXLINE( 379)			city1->updateHitbox();
HXLINE( 380)			this->add(city1);
HXLINE( 382)			this->phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 383)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 384)				this->add(this->phillyCityLights);
            			}
HXLINE( 387)			{
HXLINE( 388)				{
HXLINE( 389)					 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 389)					 ::flixel::FlxSprite light1 = light->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 390)					light1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 391)					light1->set_visible(false);
HXLINE( 392)					light1->setGraphicSize(::Std_obj::_hx_int((light1->get_width() * ((Float)0.85))),null());
HXLINE( 393)					light1->updateHitbox();
HXLINE( 394)					light1->set_antialiasing(true);
HXLINE( 395)					this->phillyCityLights->add(light1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 388)				{
HXLINE( 389)					 ::flixel::FlxSprite light2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 389)					 ::flixel::FlxSprite light3 = light2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 390)					light3->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 391)					light3->set_visible(false);
HXLINE( 392)					light3->setGraphicSize(::Std_obj::_hx_int((light3->get_width() * ((Float)0.85))),null());
HXLINE( 393)					light3->updateHitbox();
HXLINE( 394)					light3->set_antialiasing(true);
HXLINE( 395)					this->phillyCityLights->add(light3).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 388)				{
HXLINE( 389)					 ::flixel::FlxSprite light4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 389)					 ::flixel::FlxSprite light5 = light4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 390)					light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 391)					light5->set_visible(false);
HXLINE( 392)					light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE( 393)					light5->updateHitbox();
HXLINE( 394)					light5->set_antialiasing(true);
HXLINE( 395)					this->phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 388)				{
HXLINE( 389)					 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 389)					 ::flixel::FlxSprite light7 = light6->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 390)					light7->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 391)					light7->set_visible(false);
HXLINE( 392)					light7->setGraphicSize(::Std_obj::_hx_int((light7->get_width() * ((Float)0.85))),null());
HXLINE( 393)					light7->updateHitbox();
HXLINE( 394)					light7->set_antialiasing(true);
HXLINE( 395)					this->phillyCityLights->add(light7).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 388)				{
HXLINE( 389)					 ::flixel::FlxSprite light8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 389)					 ::flixel::FlxSprite light9 = light8->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 390)					light9->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 391)					light9->set_visible(false);
HXLINE( 392)					light9->setGraphicSize(::Std_obj::_hx_int((light9->get_width() * ((Float)0.85))),null());
HXLINE( 393)					light9->updateHitbox();
HXLINE( 394)					light9->set_antialiasing(true);
HXLINE( 395)					this->phillyCityLights->add(light9).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
HXLINE( 398)			 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN( 398)			 ::flixel::FlxSprite streetBehind1 = streetBehind->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/behindTrain",07,a4,6d,d4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 399)			this->add(streetBehind1);
HXLINE( 401)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN( 401)			this->phillyTrain = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/train",61,ce,51,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 402)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 403)				this->add(this->phillyTrain);
            			}
HXLINE( 406)			 ::flixel::_hx_system::FlxSound _hx_tmp1 =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 406)			this->trainSound = _hx_tmp1->loadEmbedded(::Paths_obj::sound(HX_("train_passes",56,da,5a,7f),HX_("week3",bf,95,be,c7)),null(),null(),null());
HXLINE( 407)			::flixel::FlxG_obj::sound->list->add(this->trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 411)			 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind1->y,null());
HXDLIN( 411)			 ::flixel::FlxSprite street1 = street->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/street",4a,23,ee,ee)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 412)			this->add(street1);
HXLINE( 369)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE( 548)			::PlayState_obj::curStage = HX_("school",74,b8,c8,40);
HXLINE( 552)			 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 552)			 ::flixel::FlxSprite bgSky1 = bgSky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSky",52,34,cf,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 553)			bgSky1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 554)			this->add(bgSky1);
HXLINE( 556)			int repositionShit = -200;
HXLINE( 558)			 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 558)			 ::flixel::FlxSprite bgSchool1 = bgSchool->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSchool",a3,21,c0,f5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 559)			bgSchool1->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 560)			this->add(bgSchool1);
HXLINE( 562)			 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 562)			 ::flixel::FlxSprite bgStreet1 = bgStreet->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebStreet",32,81,24,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 563)			bgStreet1->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 564)			this->add(bgStreet1);
HXLINE( 566)			 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 566)			 ::flixel::FlxSprite fgTrees1 = fgTrees->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTreesBack",4d,ac,bd,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 567)			fgTrees1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 568)			this->add(fgTrees1);
HXLINE( 570)			 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 571)			::String treetex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 571)			 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7)));
HXLINE( 572)			bgTrees->set_frames(treetex1);
HXLINE( 573)			bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_46c2835d_16,19),12,null(),null(),null());
HXLINE( 574)			bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 575)			bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 576)			this->add(bgTrees);
HXLINE( 578)			 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 579)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 579)			treeLeaves->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 580)			treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 581)			treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 582)			treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 583)			this->add(treeLeaves);
HXLINE( 585)			int widShit = ::Std_obj::_hx_int((bgSky1->get_width() * ( (Float)(6) )));
HXLINE( 587)			bgSky1->setGraphicSize(widShit,null());
HXLINE( 588)			bgSchool1->setGraphicSize(widShit,null());
HXLINE( 589)			bgStreet1->setGraphicSize(widShit,null());
HXLINE( 590)			bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 591)			fgTrees1->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 592)			treeLeaves->setGraphicSize(widShit,null());
HXLINE( 594)			fgTrees1->updateHitbox();
HXLINE( 595)			bgSky1->updateHitbox();
HXLINE( 596)			bgSchool1->updateHitbox();
HXLINE( 597)			bgStreet1->updateHitbox();
HXLINE( 598)			bgTrees->updateHitbox();
HXLINE( 599)			treeLeaves->updateHitbox();
HXLINE( 601)			this->bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 602)			this->bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 604)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("roses",04,6c,64,ed))) {
HXLINE( 606)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 607)					this->bgGirls->getScared();
            				}
            			}
HXLINE( 611)			 ::BackgroundGirls _hx_tmp1 = this->bgGirls;
HXDLIN( 611)			Float _hx_tmp2 = this->bgGirls->get_width();
HXDLIN( 611)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp2 * ::PlayState_obj::daPixelZoom)),null());
HXLINE( 612)			this->bgGirls->updateHitbox();
HXLINE( 613)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 614)				this->add(this->bgGirls);
            			}
HXLINE( 547)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 706)			::PlayState_obj::curStage = HX_("schoolEvil",28,a1,f5,f7);
HXLINE( 708)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectBG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,3,2,null(),null());
HXLINE( 709)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectFG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,5,2,null(),null());
HXLINE( 711)			int posX = 400;
HXLINE( 712)			int posY = 200;
HXLINE( 714)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 715)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 715)			bg->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 716)			bg->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 717)			bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 718)			bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 719)			bg->scale->set(6,6);
HXLINE( 720)			this->add(bg);
HXLINE( 705)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_2==HX_("stage",be,6a,0b,84)) ){
HXLINE( 762)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 763)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 764)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 764)			::String library = null();
HXDLIN( 764)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 765)			bg1->set_antialiasing(true);
HXLINE( 766)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 767)			bg1->set_active(false);
HXLINE( 768)			this->add(bg1);
HXLINE( 770)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 770)			::String library1 = null();
HXDLIN( 770)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 771)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 772)			stageFront1->updateHitbox();
HXLINE( 773)			stageFront1->set_antialiasing(true);
HXLINE( 774)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 775)			stageFront1->set_active(false);
HXLINE( 776)			this->add(stageFront1);
HXLINE( 778)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 778)			::String library2 = null();
HXDLIN( 778)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 779)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 780)			stageCurtains1->updateHitbox();
HXLINE( 781)			stageCurtains1->set_antialiasing(true);
HXLINE( 782)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 783)			stageCurtains1->set_active(false);
HXLINE( 785)			this->add(stageCurtains1);
HXLINE( 761)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 789)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 790)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 791)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 791)			::String library = null();
HXDLIN( 791)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 792)			bg1->set_antialiasing(true);
HXLINE( 793)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 794)			bg1->set_active(false);
HXLINE( 795)			this->add(bg1);
HXLINE( 797)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 797)			::String library1 = null();
HXDLIN( 797)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 798)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 799)			stageFront1->updateHitbox();
HXLINE( 800)			stageFront1->set_antialiasing(true);
HXLINE( 801)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 802)			stageFront1->set_active(false);
HXLINE( 803)			this->add(stageFront1);
HXLINE( 805)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 805)			::String library2 = null();
HXDLIN( 805)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 806)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 807)			stageCurtains1->updateHitbox();
HXLINE( 808)			stageCurtains1->set_antialiasing(true);
HXLINE( 809)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 810)			stageCurtains1->set_active(false);
HXLINE( 812)			this->add(stageCurtains1);
            		}
            		_hx_goto_6:;
HXLINE( 815)		::String gfVersion = HX_("gf",1f,5a,00,00);
HXLINE( 817)		::String _hx_switch_3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		if (  (_hx_switch_3==HX_("gf-car",a6,63,ab,07)) ){
HXLINE( 820)			gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 820)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("gf-christmas",94,26,b1,6d)) ){
HXLINE( 822)			gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 822)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("gf-gone",8d,44,fb,b0)) ){
HXLINE( 826)			gfVersion = HX_("gf-gone",8d,44,fb,b0);
HXDLIN( 826)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_3==HX_("gf-pixel",98,3e,8c,55)) ){
HXLINE( 824)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 824)			goto _hx_goto_7;
            		}
            		/* default */{
HXLINE( 828)			gfVersion = HX_("gf-gone",8d,44,fb,b0);
            		}
            		_hx_goto_7:;
HXLINE( 831)		::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfVersion,null());
HXLINE( 832)		::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 834)		::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 836)		Float camPos = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 836)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 838)		::String _hx_switch_4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 856)			 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 856)			_g->set_x((_g->x + 400));
HXDLIN( 856)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ){
HXLINE( 841)			::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 842)			::PlayState_obj::gf->set_visible(false);
HXLINE( 843)			if (::PlayState_obj::isStoryMode) {
HXLINE( 845)				{
HXLINE( 845)					 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 845)					_g->set_x((_g->x + 600));
            				}
HXLINE( 846)				this->tweenCamIn();
            			}
HXLINE( 840)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("goatmeal",de,ec,8c,e6)) ){
HXLINE( 875)			{
HXLINE( 875)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 875)				_g->set_x((_g->x + ((Float)400.9)));
            			}
HXLINE( 876)			{
HXLINE( 876)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 876)				_g1->set_y((_g1->y + 275));
            			}
HXLINE( 877)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 877)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 874)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 852)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 852)			_g->set_y((_g->y + 100));
HXDLIN( 852)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 854)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 854)			_g->set_y((_g->y + 130));
HXDLIN( 854)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 861)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 861)			_g->set_x((_g->x - ( (Float)(500) )));
HXDLIN( 861)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 858)			{
HXLINE( 858)				 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 858)				_g->set_x((_g->x + 600));
            			}
HXLINE( 859)			{
HXLINE( 859)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 859)				_g1->set_y((_g1->y + 300));
            			}
HXLINE( 857)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 863)			{
HXLINE( 863)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 863)				_g->set_x((_g->x + 150));
            			}
HXLINE( 864)			{
HXLINE( 864)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 864)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 865)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 865)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 862)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 867)			{
HXLINE( 867)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 867)				_g->set_x((_g->x + 150));
            			}
HXLINE( 868)			{
HXLINE( 868)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 868)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 869)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 869)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 866)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 871)			{
HXLINE( 871)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 871)				_g->set_x((_g->x - ( (Float)(150) )));
            			}
HXLINE( 872)			{
HXLINE( 872)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 872)				_g1->set_y((_g1->y + 100));
            			}
HXLINE( 873)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 873)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 870)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_4==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 850)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 850)			_g->set_y((_g->y + 200));
HXDLIN( 850)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
HXLINE( 882)		::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 885)		::String _hx_switch_5 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_5==HX_("bungerTime",e6,3c,36,91)) ){
HXLINE( 923)			{
HXLINE( 923)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 923)				_g->set_x((_g->x + ((Float)721.9)));
            			}
HXLINE( 924)			{
HXLINE( 924)				 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 924)				_g1->set_y((_g1->y + ((Float)218.15)));
            			}
HXLINE( 925)			{
HXLINE( 925)				 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 925)				_g2->set_x((_g2->x + 516));
            			}
HXLINE( 926)			{
HXLINE( 926)				 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 926)				_g3->set_y((_g3->y + ((Float)431.4)));
            			}
HXLINE( 922)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_5==HX_("limo",1f,17,b3,47)) ){
HXLINE( 888)			{
HXLINE( 888)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 888)				_g->set_y((_g->y - ( (Float)(220) )));
            			}
HXLINE( 889)			{
HXLINE( 889)				 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 889)				_g1->set_x((_g1->x + 260));
            			}
HXLINE( 890)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 891)				this->resetFastCar();
HXLINE( 892)				this->add(this->fastCar);
            			}
HXLINE( 887)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_5==HX_("mall",d4,3a,56,48)) ){
HXLINE( 896)			 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 896)			_g->set_x((_g->x + 200));
HXDLIN( 896)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_5==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 899)			{
HXLINE( 899)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 899)				_g->set_x((_g->x + 320));
            			}
HXLINE( 900)			{
HXLINE( 900)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 900)				_g1->set_y((_g1->y - ( (Float)(80) )));
            			}
HXLINE( 898)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_5==HX_("school",74,b8,c8,40)) ){
HXLINE( 902)			{
HXLINE( 902)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 902)				_g->set_x((_g->x + 200));
            			}
HXLINE( 903)			{
HXLINE( 903)				 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 903)				_g1->set_y((_g1->y + 220));
            			}
HXLINE( 904)			{
HXLINE( 904)				 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 904)				_g2->set_x((_g2->x + 180));
            			}
HXLINE( 905)			{
HXLINE( 905)				 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 905)				_g3->set_y((_g3->y + 300));
            			}
HXLINE( 901)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_5==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 907)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 909)				 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 912)				this->add(evilTrail);
            			}
HXLINE( 917)			{
HXLINE( 917)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 917)				_g->set_x((_g->x + 200));
            			}
HXLINE( 918)			{
HXLINE( 918)				 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 918)				_g1->set_y((_g1->y + 220));
            			}
HXLINE( 919)			{
HXLINE( 919)				 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 919)				_g2->set_x((_g2->x + 180));
            			}
HXLINE( 920)			{
HXLINE( 920)				 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 920)				_g3->set_y((_g3->y + 300));
            			}
HXLINE( 906)			goto _hx_goto_9;
            		}
            		_hx_goto_9:;
HXLINE( 929)		this->add(::PlayState_obj::gf);
HXLINE( 932)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 933)			this->add(this->limo);
            		}
HXLINE( 935)		this->add(::PlayState_obj::dad);
HXLINE( 936)		this->add(::PlayState_obj::boyfriend);
HXLINE( 938)		if ((::PlayState_obj::curStage == HX_("bungerTime",e6,3c,36,91))) {
HXLINE( 939)			this->upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-145,647,null());
            		}
HXLINE( 940)		 ::flixel::FlxSprite _hx_tmp11 = this->upperBoppers;
HXDLIN( 940)		::String _hx_tmp12 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 940)		_hx_tmp11->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp12,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 941)		this->upperBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 942)		this->upperBoppers->set_antialiasing(true);
HXLINE( 943)		this->upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 944)		 ::flixel::FlxSprite _hx_tmp13 = this->upperBoppers;
HXDLIN( 944)		_hx_tmp13->setGraphicSize(::Std_obj::_hx_int((this->upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 945)		this->upperBoppers->updateHitbox();
HXLINE( 946)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 947)			this->add(this->upperBoppers);
            		}
HXLINE( 949)		if (::PlayState_obj::loadRep) {
HXLINE( 954)			::flixel::FlxG_obj::save->data->__SetField(HX_("botplay",7b,fb,a9,61),true,::hx::paccDynamic);
HXLINE( 955)			::flixel::FlxG_obj::save->data->__SetField(HX_("scrollSpeed",3a,e0,46,cb),::PlayState_obj::rep->replay->__Field(HX_("noteSpeed",35,e2,f6,be),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 956)			::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE( 960)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 963)		doof->scrollFactor->set(null(),null());
HXLINE( 964)		doof->finishThing = this->startCountdown_dyn();
HXLINE( 966)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 968)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 969)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 971)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 972)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 974)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 975)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 977)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 978)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 982)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 986)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 988)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 990)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 992)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 993)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 996)		this->add(this->camFollow);
HXLINE( 998)		 ::flixel::FlxCamera _hx_tmp14 = ::flixel::FlxG_obj::camera;
HXDLIN( 998)		 ::flixel::FlxObject _hx_tmp15 = this->camFollow;
HXDLIN( 998)		_hx_tmp14->follow(_hx_tmp15,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE(1000)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE(1001)		{
HXLINE(1001)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1001)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN(1001)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1001)			if (point->_weak) {
HXLINE(1001)				point->put();
            			}
            		}
HXLINE(1003)		{
HXLINE(1003)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1003)			_this1->x = ( (Float)(0) );
HXDLIN(1003)			_this1->y = ( (Float)(0) );
HXDLIN(1003)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN(1003)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE(1005)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE(1007)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1009)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1009)			::String library = null();
HXDLIN(1009)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1010)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1011)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1012)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1013)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1014)			this->add(::PlayState_obj::songPosBG);
HXLINE(1016)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN(1016)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(1016)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN(1016)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,90000,null());
HXLINE(1018)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1019)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1020)			this->add(::PlayState_obj::songPosBar);
HXLINE(1022)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1022)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN(1022)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1023)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1024)				 ::flixel::text::FlxText _g = songName2;
HXDLIN(1024)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE(1025)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1026)			songName2->scrollFactor->set(null(),null());
HXLINE(1027)			this->add(songName2);
HXLINE(1028)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1031)		 ::flixel::FlxSprite _hx_tmp16 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN(1031)		::String library2 = null();
HXDLIN(1031)		this->healthBarBG = _hx_tmp16->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(1032)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1033)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE(1034)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1035)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE(1036)		this->add(this->healthBarBG);
HXLINE(1038)		Float _hx_tmp17 = (this->healthBarBG->x + 4);
HXDLIN(1038)		Float _hx_tmp18 = (this->healthBarBG->y + 4);
HXDLIN(1038)		int _hx_tmp19 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN(1038)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp17,_hx_tmp18,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp19,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE(1040)		this->healthBar->scrollFactor->set(null(),null());
HXLINE(1041)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE(1043)		this->add(this->healthBar);
HXLINE(1046)		::String _hx_tmp20;
HXDLIN(1046)		if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(1046)			_hx_tmp20 = HX_("Hard",0b,5b,e1,2f);
            		}
            		else {
HXLINE(1046)			if ((::PlayState_obj::storyDifficulty == 1)) {
HXLINE(1046)				_hx_tmp20 = HX_("Normal",47,e6,fd,64);
            			}
            			else {
HXLINE(1046)				_hx_tmp20 = HX_("Easy",22,b8,e5,2d);
            			}
            		}
HXDLIN(1046)		::String _hx_tmp21;
HXDLIN(1046)		if (::Main_obj::watermarks) {
HXLINE(1046)			_hx_tmp21 = (HX_(" - KE ",b3,9f,d3,c9) + ::MainMenuState_obj::kadeEngineVer);
            		}
            		else {
HXLINE(1046)			_hx_tmp21 = HX_("",00,00,00,00);
            		}
HXDLIN(1046)		this->kadeEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,(this->healthBarBG->y + 50),0,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" ",20,00,00,00)) + _hx_tmp20) + _hx_tmp21)) ),16,null());
HXLINE(1047)		this->kadeEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1048)		this->kadeEngineWatermark->scrollFactor->set(null(),null());
HXLINE(1049)		this->add(this->kadeEngineWatermark);
HXLINE(1051)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1052)			this->kadeEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE(1054)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE(1055)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("accuracyDisplay",09,75,5e,26),::hx::paccDynamic)) ))) {
HXLINE(1056)			 ::flixel::text::FlxText _hx_tmp = this->scoreTxt;
HXDLIN(1056)			Float _hx_tmp1 = this->healthBarBG->x;
HXDLIN(1056)			_hx_tmp->set_x((_hx_tmp1 + (this->healthBarBG->get_width() / ( (Float)(2) ))));
            		}
HXLINE(1057)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1058)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE(1059)		if (::PlayState_obj::offsetTesting) {
HXLINE(1060)			 ::flixel::text::FlxText _g = this->scoreTxt;
HXDLIN(1060)			_g->set_x((_g->x + 300));
            		}
HXLINE(1061)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1061)			this->scoreTxt->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(20) )));
            		}
HXLINE(1062)		this->add(this->scoreTxt);
HXLINE(1064)		Float _hx_tmp22 = this->healthBarBG->x;
HXDLIN(1064)		Float _hx_tmp23 = ((_hx_tmp22 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1064)		int _hx_tmp24;
HXDLIN(1064)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1064)			_hx_tmp24 = 100;
            		}
            		else {
HXLINE(1064)			_hx_tmp24 = -100;
            		}
HXDLIN(1064)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp23,(this->healthBarBG->y + _hx_tmp24),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE(1065)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1066)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE(1067)		if (::PlayState_obj::loadRep) {
HXLINE(1069)			this->add(this->replayTxt);
            		}
HXLINE(1072)		Float _hx_tmp25 = this->healthBarBG->x;
HXDLIN(1072)		Float _hx_tmp26 = ((_hx_tmp25 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN(1072)		int _hx_tmp27;
HXDLIN(1072)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1072)			_hx_tmp27 = 100;
            		}
            		else {
HXLINE(1072)			_hx_tmp27 = -100;
            		}
HXDLIN(1072)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp26,(this->healthBarBG->y + _hx_tmp27),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE(1073)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1074)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE(1076)		bool _hx_tmp28;
HXDLIN(1076)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1076)			_hx_tmp28 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE(1076)			_hx_tmp28 = false;
            		}
HXDLIN(1076)		if (_hx_tmp28) {
HXLINE(1076)			this->add(this->botPlayState);
            		}
HXLINE(1078)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE(1079)		 ::HealthIcon _hx_tmp29 = this->iconP1;
HXDLIN(1079)		Float _hx_tmp30 = this->healthBar->y;
HXDLIN(1079)		_hx_tmp29->set_y((_hx_tmp30 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE(1080)		this->add(this->iconP1);
HXLINE(1082)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE(1083)		 ::HealthIcon _hx_tmp31 = this->iconP2;
HXDLIN(1083)		Float _hx_tmp32 = this->healthBar->y;
HXDLIN(1083)		_hx_tmp31->set_y((_hx_tmp32 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(1084)		this->add(this->iconP2);
HXLINE(1086)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1087)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1088)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1089)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1090)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1091)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1092)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1093)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1094)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1096)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1097)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1099)		this->kadeEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1100)		if (::PlayState_obj::loadRep) {
HXLINE(1101)			this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1108)		this->startingSong = true;
HXLINE(1110)		if (::PlayState_obj::isStoryMode) {
HXLINE(1112)			::String _hx_switch_6 = this->curSong.toLowerCase();
            			if (  (_hx_switch_6==HX_("endless",b4,a0,fb,3e)) ){
HXLINE(1152)				this->schoolIntro(doof);
HXDLIN(1152)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("expurgation",a8,b8,80,42)) ){
HXLINE(1154)				this->schoolIntro(doof);
HXDLIN(1154)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("heartbass",a5,02,d7,a4)) ){
HXLINE(1150)				this->schoolIntro(doof);
HXDLIN(1150)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("roses",04,6c,64,ed)) ){
HXLINE(1145)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1145)				_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1146)				this->schoolIntro(doof);
HXLINE(1144)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1143)				this->schoolIntro(doof);
HXDLIN(1143)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE(1148)				this->schoolIntro(doof);
HXDLIN(1148)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_6==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1137_create)
HXLINE(1137)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1130_create)
HXLINE(1131)						_gthis->camHUD->set_visible(true);
HXLINE(1132)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1133)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),_gthis->defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1121_create)
HXLINE(1122)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1123)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1123)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1124)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1125)					{
HXLINE(1125)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1125)						_g->set_x((_g->x + 200));
            					}
HXLINE(1126)					{
HXLINE(1126)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1126)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1126)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1126)						if (point->_weak) {
HXLINE(1126)							point->put();
            						}
            					}
HXLINE(1127)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1129)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_1(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1115)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1115)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1115)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1116)				this->add(blackScreen2);
HXLINE(1117)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1118)				this->camHUD->set_visible(false);
HXLINE(1120)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
HXLINE(1114)				goto _hx_goto_10;
            			}
            			/* default */{
HXLINE(1156)				this->startCountdown();
            			}
            			_hx_goto_10:;
            		}
            		else {
HXLINE(1161)			::String _g = this->curSong.toLowerCase();
HXLINE(1164)			this->startCountdown();
            		}
HXLINE(1168)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1169)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1171)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1202_schoolIntro)
HXLINE(1203)			{
HXLINE(1203)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1203)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1205)			if ((black1->alpha > 0)) {
HXLINE(1207)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1211)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1213)					_gthis->inCutscene = true;
HXLINE(1215)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1220_schoolIntro)
HXLINE(1221)							{
HXLINE(1221)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1221)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1222)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1224)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1235_schoolIntro)
HXLINE(1235)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1230_schoolIntro)
HXLINE(1231)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1232)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1233)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1240_schoolIntro)
HXLINE(1240)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1228)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1229)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1229)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1238)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1217)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1218)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1219)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1247)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1251)					_gthis->startCountdown();
            				}
HXLINE(1253)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1175_schoolIntro)
HXLINE(1174)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1176)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1176)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1177)		black1->scrollFactor->set(null(),null());
HXLINE(1178)		this->add(black1);
HXLINE(1180)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1180)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1181)		red1->scrollFactor->set(null(),null());
HXLINE(1183)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1184)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1184)		::String library = null();
HXDLIN(1184)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1184)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1185)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1186)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1186)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1187)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1188)		senpaiEvil->updateHitbox();
HXLINE(1189)		senpaiEvil->screenCenter(null());
HXLINE(1191)		bool _hx_tmp1;
HXDLIN(1191)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1191)			_hx_tmp1 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1191)			_hx_tmp1 = true;
            		}
HXDLIN(1191)		if (_hx_tmp1) {
HXLINE(1193)			this->remove(black1,null());
HXLINE(1195)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1197)				this->add(red1);
            			}
            		}
HXLINE(1201)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1291_startCountdown)
HXLINE(1292)			::PlayState_obj::dad->dance();
HXLINE(1293)			::PlayState_obj::gf->dance();
HXLINE(1294)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1296)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1297)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_28,3));
HXLINE(1298)			introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_29,3));
HXLINE(1303)			introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_30,3));
HXLINE(1309)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1310)			::String altSuffix = HX_("",00,00,00,00);
HXLINE(1312)			{
HXLINE(1312)				 ::Dynamic value = introAssets->keys();
HXDLIN(1312)				while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1312)					::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1314)					if ((value1 == ::PlayState_obj::curStage)) {
HXLINE(1316)						introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE(1317)						altSuffix = HX_("-pixel",39,03,b3,c0);
            					}
            				}
            			}
HXLINE(1321)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1325)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1325)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1340_startCountdown)
HXLINE(1340)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1327)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1327)					::String library = null();
HXDLIN(1327)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1328)					ready1->scrollFactor->set(null(),null());
HXLINE(1329)					ready1->updateHitbox();
HXLINE(1331)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1332)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1332)						Float _hx_tmp = ready1->get_width();
HXDLIN(1332)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1334)					ready1->screenCenter(null());
HXLINE(1335)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1336)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1336)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1336)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1336)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1343)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1343)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1357_startCountdown)
HXLINE(1357)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1345)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1345)					::String library = null();
HXDLIN(1345)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1346)					set1->scrollFactor->set(null(),null());
HXLINE(1348)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1349)						 ::flixel::FlxSprite set = set1;
HXDLIN(1349)						Float _hx_tmp = set1->get_width();
HXDLIN(1349)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1351)					set1->screenCenter(null());
HXLINE(1352)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1353)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1353)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1353)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1353)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1360)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1360)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1376_startCountdown)
HXLINE(1376)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1362)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1362)					::String library = null();
HXDLIN(1362)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1363)					go1->scrollFactor->set(null(),null());
HXLINE(1365)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1366)						 ::flixel::FlxSprite go = go1;
HXDLIN(1366)						Float _hx_tmp = go1->get_width();
HXDLIN(1366)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1368)					go1->updateHitbox();
HXLINE(1370)					go1->screenCenter(null());
HXLINE(1371)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1372)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1372)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1372)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1372)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1379)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1379)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1383)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1383)			int _hx_tmp = 0;
HXDLIN(1383)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1268_startCountdown)
HXLINE(1267)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1269)		this->inCutscene = false;
HXLINE(1271)		this->generateStaticArrows(0);
HXLINE(1272)		this->generateStaticArrows(1);
HXLINE(1276)		if (this->executeModchart) {
HXLINE(1278)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState();
HXLINE(1279)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))));
            		}
HXLINE(1283)		this->talking = false;
HXLINE(1284)		this->startedCountdown = true;
HXLINE(1285)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1286)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1286)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1288)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_35,1);
HXLINE(1290)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1290)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1396_startSong)
HXLINE(1397)		this->startingSong = false;
HXLINE(1398)		this->songStarted = true;
HXLINE(1399)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1400)		this->lastReportedPlayheadPosition = 0;
HXLINE(1402)		if (!(this->paused)) {
HXLINE(1404)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1404)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            		}
HXLINE(1407)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1408)		this->vocals->play(null(),null(),null());
HXLINE(1411)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1413)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1415)			this->remove(::PlayState_obj::songPosBG,null());
HXLINE(1416)			this->remove(::PlayState_obj::songPosBar,null());
HXLINE(1417)			this->remove(this->songName,null());
HXLINE(1419)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1419)			::String library = null();
HXDLIN(1419)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1420)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1421)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1422)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1423)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1424)			this->add(::PlayState_obj::songPosBG);
HXLINE(1426)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN(1426)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(1426)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN(1426)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) )));
HXDLIN(1426)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,(this->songLength - ( (Float)(1000) )),null());
HXLINE(1428)			::PlayState_obj::songPosBar->set_numDivisions(1000);
HXLINE(1429)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1430)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1431)			this->add(::PlayState_obj::songPosBar);
HXLINE(1433)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1433)			Float songName1 = ((songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) ))) - ( (Float)(20) ));
HXDLIN(1433)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,songName1,::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1434)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(1435)				 ::flixel::text::FlxText _g = songName2;
HXDLIN(1435)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE(1436)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1437)			songName2->scrollFactor->set(null(),null());
HXLINE(1438)			this->add(songName2);
HXLINE(1440)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1441)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1442)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1446)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly",48,eb,f2,23)) ){
HXLINE(1448)			this->allowedToHeadbang = true;
HXDLIN(1448)			goto _hx_goto_36;
            		}
            		/* default */{
HXLINE(1449)			this->allowedToHeadbang = false;
            		}
            		_hx_goto_36:;
HXLINE(1454)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1454)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1454)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(1454)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1461_generateSong)
HXLINE(1464)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1465)		::Conductor_obj::changeBPM(( (int)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1467)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1469)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1470)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1470)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE(1472)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1474)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1476)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1477)		this->add(this->notes);
HXLINE(1479)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1484)		int playerCounter = 0;
HXLINE(1488)		::String songPath = ((HX_("assets/data/",f9,10,73,a0) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/",2f,00,00,00));
HXLINE(1489)		{
HXLINE(1489)			int _g = 0;
HXDLIN(1489)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(songPath);
HXDLIN(1489)			while((_g < _g1->length)){
HXLINE(1489)				::String file = _g1->__get(_g);
HXDLIN(1489)				_g = (_g + 1);
HXLINE(1491)				::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,songPath)->init(1,file));
HXLINE(1492)				if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(1494)					if (::StringTools_obj::endsWith(path,HX_(".offset",41,ee,1a,d9))) {
HXLINE(1496)						::haxe::Log_obj::trace((HX_("Found offset file: ",91,d6,be,59) + path),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),1496,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(1497)						::PlayState_obj::songOffset = ::Std_obj::parseFloat(file.substring(0,file.indexOf(HX_(".off",01,64,bc,1e),null())));
HXLINE(1498)						goto _hx_goto_38;
            					}
            					else {
HXLINE(1500)						::haxe::Log_obj::trace((HX_("Offset file not found. Creating one @: ",b5,d2,b6,1e) + songPath),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),1500,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(1501)						::sys::io::File_obj::saveContent(((songPath + ::PlayState_obj::songOffset) + HX_(".offset",41,ee,1a,d9)),HX_("",00,00,00,00));
            					}
            				}
            			}
            			_hx_goto_38:;
            		}
HXLINE(1506)		int daBeats = 0;
HXLINE(1507)		{
HXLINE(1507)			int _g2 = 0;
HXDLIN(1507)			while((_g2 < noteData->length)){
HXLINE(1507)				 ::Dynamic section = noteData->__get(_g2);
HXDLIN(1507)				_g2 = (_g2 + 1);
HXLINE(1509)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1511)				{
HXLINE(1511)					int _g = 0;
HXDLIN(1511)					::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1511)					while((_g < _g1->get_length())){
HXLINE(1511)						 ::Dynamic songNotes = _g1->__get(_g);
HXDLIN(1511)						_g = (_g + 1);
HXLINE(1513)						Float daStrumTime = ( (Float)(((songNotes->__GetItem(0) + ::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) + ::PlayState_obj::songOffset)) );
HXLINE(1514)						if ((daStrumTime < 0)) {
HXLINE(1515)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1516)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1518)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1520)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1522)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1525)						 ::Note oldNote;
HXLINE(1526)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1527)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1529)							oldNote = null();
            						}
HXLINE(1531)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null());
HXLINE(1532)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1533)						swagNote->scrollFactor->set(0,0);
HXLINE(1535)						Float susLength = swagNote->sustainLength;
HXLINE(1537)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1538)						this->unspawnNotes->push(swagNote);
HXLINE(1540)						{
HXLINE(1540)							int _g2 = 0;
HXDLIN(1540)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1540)							while((_g2 < _g3)){
HXLINE(1540)								_g2 = (_g2 + 1);
HXDLIN(1540)								int susNote = (_g2 - 1);
HXLINE(1542)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1544)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true);
HXLINE(1545)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1546)								this->unspawnNotes->push(sustainNote);
HXLINE(1548)								sustainNote->mustPress = gottaHitNote;
HXLINE(1550)								if (sustainNote->mustPress) {
HXLINE(1552)									 ::Note _g = sustainNote;
HXDLIN(1552)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE(1556)						swagNote->mustPress = gottaHitNote;
HXLINE(1558)						if (swagNote->mustPress) {
HXLINE(1560)							 ::Note _g = swagNote;
HXDLIN(1560)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1566)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1572)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1574)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1579_sortByShit)
HXDLIN(1579)		Float Value1 = Obj1->strumTime;
HXDLIN(1579)		Float Value2 = Obj2->strumTime;
HXDLIN(1579)		int result = 0;
HXDLIN(1579)		if ((Value1 < Value2)) {
HXDLIN(1579)			result = -1;
            		}
            		else {
HXDLIN(1579)			if ((Value1 > Value2)) {
HXDLIN(1579)				result = 1;
            			}
            		}
HXDLIN(1579)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1584_generateStaticArrows)
HXDLIN(1584)		int _g = 0;
HXDLIN(1584)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1721_generateStaticArrows)
HXLINE(1721)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(1584)			_g = (_g + 1);
HXDLIN(1584)			int i = (_g - 1);
HXLINE(1587)			 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->strumLine->y,null());
HXLINE(1589)			::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1627)				::String library = null();
HXDLIN(1627)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1627)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1628)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1629)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1630)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1631)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1633)				babyArrow->set_antialiasing(true);
HXLINE(1634)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1636)				Float _hx_switch_1 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_1==( (Float)(0) )) ){
HXLINE(1639)					{
HXLINE(1639)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1639)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1640)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1641)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1642)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1638)					goto _hx_goto_47;
            				}
            				if (  (_hx_switch_1==( (Float)(1) )) ){
HXLINE(1644)					{
HXLINE(1644)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1644)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1645)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1646)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1647)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1643)					goto _hx_goto_47;
            				}
            				if (  (_hx_switch_1==( (Float)(2) )) ){
HXLINE(1649)					{
HXLINE(1649)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1649)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1650)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1651)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1652)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1648)					goto _hx_goto_47;
            				}
            				if (  (_hx_switch_1==( (Float)(3) )) ){
HXLINE(1654)					{
HXLINE(1654)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1654)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1655)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1656)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1657)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1653)					goto _hx_goto_47;
            				}
            				_hx_goto_47:;
HXLINE(1626)				goto _hx_goto_46;
            			}
            			if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE(1592)				::String library = null();
HXDLIN(1592)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,17,17,null(),null());
HXLINE(1593)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_51,1),null(),null(),null(),null());
HXLINE(1594)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_52,1),null(),null(),null(),null());
HXLINE(1595)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_53,1),null(),null(),null(),null());
HXLINE(1596)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_54,1),null(),null(),null(),null());
HXLINE(1598)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1598)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1599)				babyArrow->updateHitbox();
HXLINE(1600)				babyArrow->set_antialiasing(false);
HXLINE(1602)				Float _hx_switch_2 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_2==( (Float)(0) )) ){
HXLINE(1605)					{
HXLINE(1605)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1605)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1606)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_55,1),null(),null(),null(),null());
HXLINE(1607)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_56,2),12,false,null(),null());
HXLINE(1608)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_57,2),24,false,null(),null());
HXLINE(1604)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_2==( (Float)(1) )) ){
HXLINE(1610)					{
HXLINE(1610)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1610)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1611)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_58,1),null(),null(),null(),null());
HXLINE(1612)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_59,2),12,false,null(),null());
HXLINE(1613)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_60,2),24,false,null(),null());
HXLINE(1609)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_2==( (Float)(2) )) ){
HXLINE(1615)					{
HXLINE(1615)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1615)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1616)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_61,1),null(),null(),null(),null());
HXLINE(1617)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_62,2),12,false,null(),null());
HXLINE(1618)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_63,2),12,false,null(),null());
HXLINE(1614)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_2==( (Float)(3) )) ){
HXLINE(1620)					{
HXLINE(1620)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1620)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1621)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_64,1),null(),null(),null(),null());
HXLINE(1622)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_65,2),12,false,null(),null());
HXLINE(1623)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_66,2),24,false,null(),null());
HXLINE(1619)					goto _hx_goto_48;
            				}
            				_hx_goto_48:;
HXLINE(1591)				goto _hx_goto_46;
            			}
            			/* default */{
HXLINE(1661)				::String library = null();
HXDLIN(1661)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1661)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1662)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1663)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1664)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1665)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1667)				babyArrow->set_antialiasing(true);
HXLINE(1668)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1670)				Float _hx_switch_3 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(1673)					{
HXLINE(1673)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1673)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
            					}
HXLINE(1674)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1675)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1676)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1672)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(1678)					{
HXLINE(1678)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1678)						_g->set_x((_g->x + ::Note_obj::swagWidth));
            					}
HXLINE(1679)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1680)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1681)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1677)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(1683)					{
HXLINE(1683)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1683)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
            					}
HXLINE(1684)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1685)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1686)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1682)					goto _hx_goto_45;
            				}
            				if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(1688)					{
HXLINE(1688)						 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1688)						_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
            					}
HXLINE(1689)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1690)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1691)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1687)					goto _hx_goto_45;
            				}
            				_hx_goto_45:;
            			}
            			_hx_goto_46:;
HXLINE(1695)			babyArrow->updateHitbox();
HXLINE(1696)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1698)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1700)				{
HXLINE(1700)					 ::flixel::FlxSprite _g = babyArrow;
HXDLIN(1700)					_g->set_y((_g->y - ( (Float)(10) )));
            				}
HXLINE(1701)				babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1702)				::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            					->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
HXLINE(1705)			babyArrow->ID = i;
HXLINE(1707)			switch((int)(player)){
            				case (int)0: {
HXLINE(1710)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            				case (int)1: {
HXLINE(1712)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            			}
HXLINE(1715)			babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1716)			{
HXLINE(1716)				 ::flixel::FlxSprite _g1 = babyArrow;
HXDLIN(1716)				_g1->set_x((_g1->x + 50));
            			}
HXLINE(1717)			{
HXLINE(1717)				 ::flixel::FlxSprite _g2 = babyArrow;
HXDLIN(1717)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1719)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(1724)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1730_tweenCamIn)
HXDLIN(1730)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1734_openSubState)
HXLINE(1735)		if (this->paused) {
HXLINE(1737)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1739)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1740)				this->vocals->pause();
            			}
HXLINE(1744)			::String _hx_tmp = ( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1744)			::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1744)			::String _hx_tmp2 = ((HX_("Acc: ",07,26,c7,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(1744)			::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1746)			if (!(this->startTimer->finished)) {
HXLINE(1747)				this->startTimer->active = false;
            			}
            		}
HXLINE(1750)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1754_closeSubState)
HXLINE(1755)		if (this->paused) {
HXLINE(1757)			bool _hx_tmp;
HXDLIN(1757)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1757)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1757)				_hx_tmp = false;
            			}
HXDLIN(1757)			if (_hx_tmp) {
HXLINE(1759)				this->resyncVocals();
            			}
HXLINE(1762)			if (!(this->startTimer->finished)) {
HXLINE(1763)				this->startTimer->active = true;
            			}
HXLINE(1764)			this->paused = false;
HXLINE(1767)			if (this->startTimer->finished) {
HXLINE(1769)				::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1769)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1769)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(1769)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(1773)				::String _hx_tmp = this->detailsText;
HXDLIN(1773)				::String _hx_tmp1 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1773)				::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1773)				::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp2,this->iconRPC,null(),null());
            			}
            		}
HXLINE(1778)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1783_resyncVocals)
HXLINE(1784)		this->vocals->pause();
HXLINE(1786)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1787)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1788)		this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(1789)		this->vocals->play(null(),null(),null());
HXLINE(1792)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1792)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(1792)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(1792)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2505_update)
HXLINE(2505)			if (spr->animation->get_finished()) {
HXLINE(2507)				spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(2508)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1805_update)
HXLINE(1804)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1807)		this->perfectMode = false;
HXLINE(1810)		bool _hx_tmp;
HXDLIN(1810)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(1810)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1810)			_hx_tmp = _this->keyManager->checkStatus(49,_this->status);
            		}
            		else {
HXLINE(1810)			_hx_tmp = false;
            		}
HXDLIN(1810)		if (_hx_tmp) {
HXLINE(1811)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(1814)		bool _hx_tmp1;
HXDLIN(1814)		bool _hx_tmp2;
HXDLIN(1814)		if (this->executeModchart) {
HXLINE(1814)			_hx_tmp2 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(1814)			_hx_tmp2 = false;
            		}
HXDLIN(1814)		if (_hx_tmp2) {
HXLINE(1814)			_hx_tmp1 = this->songStarted;
            		}
            		else {
HXLINE(1814)			_hx_tmp1 = false;
            		}
HXDLIN(1814)		if (_hx_tmp1) {
HXLINE(1816)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(1817)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(1818)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(1819)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(1821)			{
HXLINE(1821)				int _g = 0;
HXDLIN(1821)				::Array< ::Dynamic> _g1 = this->luaWiggles;
HXDLIN(1821)				while((_g < _g1->length)){
HXLINE(1821)					 ::WiggleEffect i = _g1->__get(_g).StaticCast<  ::WiggleEffect >();
HXDLIN(1821)					_g = (_g + 1);
HXLINE(1823)					::haxe::Log_obj::trace(HX_("wiggle le gaming",c1,21,03,c7),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),1823,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(1824)					i->update(elapsed);
            				}
            			}
HXLINE(1834)			 ::flixel::FlxCamera _hx_tmp = ::flixel::FlxG_obj::camera;
HXDLIN(1834)			_hx_tmp->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(1835)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(1835)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(1837)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(1839)				this->healthBarBG->set_visible(false);
HXLINE(1840)				this->kadeEngineWatermark->set_visible(false);
HXLINE(1841)				this->healthBar->set_visible(false);
HXLINE(1842)				this->iconP1->set_visible(false);
HXLINE(1843)				this->iconP2->set_visible(false);
HXLINE(1844)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(1848)				this->healthBarBG->set_visible(true);
HXLINE(1849)				this->kadeEngineWatermark->set_visible(true);
HXLINE(1850)				this->healthBar->set_visible(true);
HXLINE(1851)				this->iconP1->set_visible(true);
HXLINE(1852)				this->iconP2->set_visible(true);
HXLINE(1853)				this->scoreTxt->set_visible(true);
            			}
HXLINE(1856)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(1857)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(1859)			{
HXLINE(1860)				{
HXLINE(1861)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1862)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1863)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1860)				{
HXLINE(1861)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1862)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1863)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1860)				{
HXLINE(1861)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1862)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1863)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
HXLINE(1860)				{
HXLINE(1861)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p1);
HXLINE(1862)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(1863)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::flixel::FlxSprite >()->set_visible(p2);
            					}
            				}
            			}
            		}
HXLINE(1872)		{
HXLINE(1873)			int balls = (this->notesHitArray->length - 1);
HXLINE(1874)			while((balls >= 0)){
HXLINE(1876)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(1877)				bool _hx_tmp;
HXDLIN(1877)				if (::hx::IsNotNull( cock )) {
HXLINE(1877)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(1877)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(1877)					_hx_tmp = false;
            				}
HXDLIN(1877)				if (_hx_tmp) {
HXLINE(1878)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(1880)					balls = 0;
            				}
HXLINE(1881)				balls = (balls - 1);
            			}
HXLINE(1883)			this->nps = this->notesHitArray->length;
HXLINE(1884)			if ((this->nps > this->maxNPS)) {
HXLINE(1885)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(1888)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1888)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(1890)			if ((this->iconP1->animation->_curAnim->name == HX_("bf-old",5e,ba,eb,07))) {
HXLINE(1891)				this->iconP1->animation->play(( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            			}
            			else {
HXLINE(1893)				this->iconP1->animation->play(HX_("bf-old",5e,ba,eb,07),null(),null(),null());
            			}
            		}
HXLINE(1896)		if ((::PlayState_obj::curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(1899)			if (this->trainMoving) {
HXLINE(1901)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1901)				_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(1903)				if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(1905)					this->updateTrainPos();
HXLINE(1906)					this->trainFrameTiming = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1912)		this->super::update(elapsed);
HXLINE(1914)		 ::flixel::text::FlxText _hx_tmp3 = this->scoreTxt;
HXDLIN(1914)		_hx_tmp3->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE(1915)		bool _hx_tmp4;
HXDLIN(1915)		bool _hx_tmp5;
HXDLIN(1915)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1915)		if (_this1->keyManager->checkStatus(13,_this1->status)) {
HXLINE(1915)			_hx_tmp5 = this->startedCountdown;
            		}
            		else {
HXLINE(1915)			_hx_tmp5 = false;
            		}
HXDLIN(1915)		if (_hx_tmp5) {
HXLINE(1915)			_hx_tmp4 = this->canPause;
            		}
            		else {
HXLINE(1915)			_hx_tmp4 = false;
            		}
HXDLIN(1915)		if (_hx_tmp4) {
HXLINE(1917)			this->persistentUpdate = false;
HXLINE(1918)			this->persistentDraw = true;
HXLINE(1919)			this->paused = true;
HXLINE(1922)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(1924)				::haxe::Log_obj::trace(HX_("GITAROO MAN EASTER EGG",52,92,3d,40),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),1924,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(1925)				{
HXLINE(1925)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(1925)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1925)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(1928)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1928)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
            		}
HXLINE(1931)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1931)		if (_this2->keyManager->checkStatus(55,_this2->status)) {
HXLINE(1934)			::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
HXLINE(1936)			{
HXLINE(1936)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1936)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1936)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(1938)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(1940)				::PlayState_obj::luaModchart->die();
HXLINE(1941)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(1949)		 ::HealthIcon _hx_tmp6 = this->iconP1;
HXDLIN(1949)		_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(1950)		 ::HealthIcon _hx_tmp7 = this->iconP2;
HXDLIN(1950)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(1952)		this->iconP1->updateHitbox();
HXLINE(1953)		this->iconP2->updateHitbox();
HXLINE(1955)		int iconOffset = 26;
HXLINE(1957)		 ::HealthIcon _hx_tmp8 = this->iconP1;
HXDLIN(1957)		Float _hx_tmp9 = this->healthBar->x;
HXDLIN(1957)		Float _hx_tmp10 = this->healthBar->get_width();
HXDLIN(1957)		_hx_tmp8->set_x((_hx_tmp9 + ((_hx_tmp10 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(1958)		 ::HealthIcon _hx_tmp11 = this->iconP2;
HXDLIN(1958)		Float _hx_tmp12 = this->healthBar->x;
HXDLIN(1958)		Float _hx_tmp13 = this->healthBar->get_width();
HXDLIN(1958)		Float _hx_tmp14 = (_hx_tmp12 + (_hx_tmp13 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(1958)		_hx_tmp11->set_x((_hx_tmp14 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(1960)		if ((this->health > 2)) {
HXLINE(1961)			this->health = ( (Float)(2) );
            		}
HXLINE(1963)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(1964)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1966)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(1968)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(1969)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1971)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2003)		if (this->startingSong) {
HXLINE(2005)			if (this->startedCountdown) {
HXLINE(2007)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2007)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2008)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2009)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2015)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2015)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2020)			this->songPositionBar = ::Conductor_obj::songPosition;
HXLINE(2022)			if (!(this->paused)) {
HXLINE(2024)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2024)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2025)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2028)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2030)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2031)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(2040)		bool _hx_tmp15;
HXDLIN(2040)		if (this->generatedMusic) {
HXLINE(2040)			_hx_tmp15 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(2040)			_hx_tmp15 = false;
            		}
HXDLIN(2040)		if (_hx_tmp15) {
HXLINE(2043)			if (this->allowedToHeadbang) {
HXLINE(2046)				bool _hx_tmp;
HXDLIN(2046)				bool _hx_tmp1;
HXDLIN(2046)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2046)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2046)					_hx_tmp1 = true;
            				}
HXDLIN(2046)				if (!(_hx_tmp1)) {
HXLINE(2046)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2046)					_hx_tmp = true;
            				}
HXDLIN(2046)				if (_hx_tmp) {
HXLINE(2049)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(2088)						bool _hx_tmp;
HXDLIN(2088)						if ((this->curBeat > 30)) {
HXLINE(2088)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(2088)							_hx_tmp = false;
            						}
HXDLIN(2088)						if (_hx_tmp) {
HXLINE(2090)							bool _hx_tmp;
HXDLIN(2090)							if ((this->curBeat >= 90)) {
HXLINE(2090)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(2090)								_hx_tmp = true;
            							}
HXDLIN(2090)							if (_hx_tmp) {
HXLINE(2092)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(2094)									if (!(this->triggeredAlready)) {
HXLINE(2096)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2097)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2099)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2088)						goto _hx_goto_73;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(2074)						bool _hx_tmp;
HXDLIN(2074)						if ((this->curBeat > 5)) {
HXLINE(2074)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(2074)							_hx_tmp = false;
            						}
HXDLIN(2074)						if (_hx_tmp) {
HXLINE(2076)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2078)								if (!(this->triggeredAlready)) {
HXLINE(2080)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2081)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2083)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2074)						goto _hx_goto_73;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(2105)						if ((this->curBeat < 170)) {
HXLINE(2107)							bool _hx_tmp;
HXDLIN(2107)							if ((this->curBeat >= 65)) {
HXLINE(2107)								if ((this->curBeat > 130)) {
HXLINE(2107)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(2107)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(2107)								_hx_tmp = true;
            							}
HXDLIN(2107)							if (_hx_tmp) {
HXLINE(2109)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2111)									if (!(this->triggeredAlready)) {
HXLINE(2113)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2114)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2116)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2105)						goto _hx_goto_73;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(2122)						bool _hx_tmp;
HXDLIN(2122)						bool _hx_tmp1;
HXDLIN(2122)						if ((this->curBeat > 10)) {
HXLINE(2122)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(2122)							_hx_tmp1 = false;
            						}
HXDLIN(2122)						if (_hx_tmp1) {
HXLINE(2122)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(2122)							_hx_tmp = false;
            						}
HXDLIN(2122)						if (_hx_tmp) {
HXLINE(2124)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2126)								if (!(this->triggeredAlready)) {
HXLINE(2128)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2129)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2131)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2122)						goto _hx_goto_73;
            					}
            					if (  (_hx_switch_0==HX_("Philly",48,eb,f2,23)) ){
HXLINE(2054)						if ((this->curBeat < 250)) {
HXLINE(2057)							bool _hx_tmp;
HXDLIN(2057)							if ((this->curBeat != 184)) {
HXLINE(2057)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2057)								_hx_tmp = false;
            							}
HXDLIN(2057)							if (_hx_tmp) {
HXLINE(2059)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(2062)									if (!(this->triggeredAlready)) {
HXLINE(2064)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2065)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2067)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2054)						goto _hx_goto_73;
            					}
            					_hx_goto_73:;
            				}
            			}
HXLINE(2139)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2140)				 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2140)				_hx_tmp->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(2143)			bool _hx_tmp;
HXDLIN(2143)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(2143)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(2143)				_hx_tmp = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2143)				_hx_tmp = false;
            			}
HXDLIN(2143)			if (_hx_tmp) {
HXLINE(2145)				int offsetX = 0;
HXLINE(2146)				int offsetY = 0;
HXLINE(2148)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2150)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2151)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2154)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2154)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(2154)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2156)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2157)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2161)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ){
HXLINE(2164)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2164)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(2164)					goto _hx_goto_74;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(2166)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2166)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2167)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2167)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2165)					goto _hx_goto_74;
            				}
            				if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(2169)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2169)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2170)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2170)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2168)					goto _hx_goto_74;
            				}
            				_hx_goto_74:;
HXLINE(2173)				if ((::PlayState_obj::dad->curCharacter == HX_("mom",cb,16,53,00))) {
HXLINE(2174)					this->vocals->set_volume(( (Float)(1) ));
            				}
            			}
HXLINE(2177)			bool _hx_tmp2;
HXDLIN(2177)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2177)				Float _hx_tmp = this->camFollow->x;
HXDLIN(2177)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(2177)				_hx_tmp2 = false;
            			}
HXDLIN(2177)			if (_hx_tmp2) {
HXLINE(2179)				int offsetX = 0;
HXLINE(2180)				int offsetY = 0;
HXLINE(2182)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2184)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2185)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2188)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2188)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(2188)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2191)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2192)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2195)				::String _hx_switch_2 = ::PlayState_obj::curStage;
            				if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(2198)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2198)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(2198)					goto _hx_goto_75;
            				}
            				if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(2200)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2200)					_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(2200)					goto _hx_goto_75;
            				}
            				if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(2202)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2202)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2203)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2203)					_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2201)					goto _hx_goto_75;
            				}
            				if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(2205)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2205)					_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2206)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2206)					_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2204)					goto _hx_goto_75;
            				}
            				_hx_goto_75:;
            			}
            		}
HXLINE(2211)		if (this->camZooming) {
HXLINE(2213)			Float a = this->defaultCamZoom;
HXDLIN(2213)			::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2214)			this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(2220)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(2222)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(2225)					this->camZooming = true;
HXLINE(2226)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(2228)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(2230)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(2232)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(2239)		if ((this->curSong == HX_("Bopeebo",90,29,16,da))) {
HXLINE(2241)			switch((int)(this->curBeat)){
            				case (int)128: case (int)129: case (int)130: {
HXLINE(2244)					this->vocals->set_volume(( (Float)(0) ));
            				}
            				break;
            			}
            		}
HXLINE(2250)		if ((this->health <= 0)) {
HXLINE(2252)			::PlayState_obj::boyfriend->stunned = true;
HXLINE(2254)			this->persistentUpdate = false;
HXLINE(2255)			this->persistentDraw = false;
HXLINE(2256)			this->paused = true;
HXLINE(2258)			{
HXLINE(2258)				 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2258)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(2259)			{
HXLINE(2259)				 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2259)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(2261)			Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2261)			this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
HXLINE(2265)			::String _hx_tmp1 = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2265)			::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(2265)			::String _hx_tmp3 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(2265)			::DiscordClient_obj::changePresence(_hx_tmp2,(((_hx_tmp3 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            		}
HXLINE(2270)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) )) {
HXLINE(2272)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2272)			if (_this->keyManager->checkStatus(82,_this->status)) {
HXLINE(2274)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2276)				this->persistentUpdate = false;
HXLINE(2277)				this->persistentDraw = false;
HXLINE(2278)				this->paused = true;
HXLINE(2280)				{
HXLINE(2280)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2280)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2281)				{
HXLINE(2281)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2281)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2283)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2283)				this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
HXLINE(2287)				::String _hx_tmp1 = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2287)				::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(2287)				::String _hx_tmp3 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(2287)				::DiscordClient_obj::changePresence(_hx_tmp2,(((_hx_tmp3 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            		}
HXLINE(2294)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2296)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 3500)) {
HXLINE(2298)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2299)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2301)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2302)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE(2306)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2309_update)
HXLINE(2313)				if (daNote->tooLate) {
HXLINE(2315)					daNote->set_active(false);
HXLINE(2316)					daNote->set_visible(false);
            				}
            				else {
HXLINE(2320)					daNote->set_visible(true);
HXLINE(2321)					daNote->set_active(true);
            				}
HXLINE(2324)				if (!(daNote->modifiedByLua)) {
HXLINE(2326)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(2328)						if (daNote->mustPress) {
HXLINE(2329)							 ::Note daNote1 = daNote;
HXDLIN(2329)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2329)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2329)							Float _hx_tmp2;
HXDLIN(2329)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2329)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2329)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2329)							daNote1->set_y((_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
            						else {
HXLINE(2331)							 ::Note daNote1 = daNote;
HXDLIN(2331)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2331)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2331)							Float _hx_tmp2;
HXDLIN(2331)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2331)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2331)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2331)							daNote1->set_y((_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
HXLINE(2332)						if (daNote->isSustainNote) {
HXLINE(2335)							bool _hx_tmp;
HXDLIN(2335)							if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("end",db,03,4d,00))) {
HXLINE(2335)								_hx_tmp = ::hx::IsNotNull( daNote->prevNote );
            							}
            							else {
HXLINE(2335)								_hx_tmp = false;
            							}
HXDLIN(2335)							if (_hx_tmp) {
HXLINE(2336)								 ::Note _g = daNote;
HXDLIN(2336)								Float _g1 = _g->y;
HXDLIN(2336)								_g->set_y((_g1 + daNote->prevNote->get_height()));
            							}
            							else {
HXLINE(2338)								 ::Note _g = daNote;
HXDLIN(2338)								Float _g1 = _g->y;
HXDLIN(2338)								_g->set_y((_g1 + (daNote->get_height() / ( (Float)(2) ))));
            							}
HXLINE(2341)							if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2343)								bool _hx_tmp;
HXDLIN(2343)								bool _hx_tmp1;
HXDLIN(2343)								bool _hx_tmp2;
HXDLIN(2343)								if (daNote->mustPress) {
HXLINE(2343)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(2343)									_hx_tmp2 = true;
            								}
HXDLIN(2343)								if (!(_hx_tmp2)) {
HXLINE(2343)									if (daNote->prevNote->wasGoodHit) {
HXLINE(2343)										_hx_tmp1 = !(daNote->canBeHit);
            									}
            									else {
HXLINE(2343)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(2343)									_hx_tmp1 = true;
            								}
HXDLIN(2343)								if (_hx_tmp1) {
HXLINE(2343)									Float _hx_tmp1 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(2343)									Float _hx_tmp2 = (_hx_tmp1 + daNote->get_height());
HXDLIN(2343)									_hx_tmp = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(2343)									_hx_tmp = false;
            								}
HXDLIN(2343)								if (_hx_tmp) {
HXLINE(2346)									 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(2347)									swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2348)									swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(2350)									daNote->set_clipRect(swagRect);
            								}
            							}
            							else {
HXLINE(2353)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(2354)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2355)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(2357)								daNote->set_clipRect(swagRect);
            							}
            						}
            					}
            					else {
HXLINE(2362)						if (daNote->mustPress) {
HXLINE(2363)							 ::Note daNote1 = daNote;
HXDLIN(2363)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2363)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2363)							Float _hx_tmp2;
HXDLIN(2363)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2363)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2363)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2363)							daNote1->set_y((_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
            						else {
HXLINE(2365)							 ::Note daNote1 = daNote;
HXDLIN(2365)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y;
HXDLIN(2365)							Float _hx_tmp1 = (((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime));
HXDLIN(2365)							Float _hx_tmp2;
HXDLIN(2365)							if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE(2365)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2365)								_hx_tmp2 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
            							}
HXDLIN(2365)							daNote1->set_y((_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2))));
            						}
HXLINE(2366)						if (daNote->isSustainNote) {
HXLINE(2368)							{
HXLINE(2368)								 ::Note _g = daNote;
HXDLIN(2368)								Float _g1 = _g->y;
HXDLIN(2368)								_g->set_y((_g1 - (daNote->get_height() / ( (Float)(2) ))));
            							}
HXLINE(2370)							if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2372)								bool _hx_tmp;
HXDLIN(2372)								bool _hx_tmp1;
HXDLIN(2372)								bool _hx_tmp2;
HXDLIN(2372)								if (daNote->mustPress) {
HXLINE(2372)									_hx_tmp2 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(2372)									_hx_tmp2 = true;
            								}
HXDLIN(2372)								if (!(_hx_tmp2)) {
HXLINE(2372)									if (daNote->prevNote->wasGoodHit) {
HXLINE(2372)										_hx_tmp1 = !(daNote->canBeHit);
            									}
            									else {
HXLINE(2372)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(2372)									_hx_tmp1 = true;
            								}
HXDLIN(2372)								if (_hx_tmp1) {
HXLINE(2372)									_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(2372)									_hx_tmp = false;
            								}
HXDLIN(2372)								if (_hx_tmp) {
HXLINE(2375)									Float swagRect = daNote->get_width();
HXDLIN(2375)									Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(2375)									Float swagRect2 = daNote->get_height();
HXDLIN(2375)									 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(2376)									swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2377)									 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(2377)									swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(2379)									daNote->set_clipRect(swagRect3);
            								}
            							}
            							else {
HXLINE(2382)								Float swagRect = daNote->get_width();
HXDLIN(2382)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(2382)								Float swagRect2 = daNote->get_height();
HXDLIN(2382)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(2383)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(2384)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(2384)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(2386)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(2392)				bool _hx_tmp;
HXDLIN(2392)				if (!(daNote->mustPress)) {
HXLINE(2392)					_hx_tmp = daNote->wasGoodHit;
            				}
            				else {
HXLINE(2392)					_hx_tmp = false;
            				}
HXDLIN(2392)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,daNote) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2418_update)
HXLINE(2419)						if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == spr->ID)) {
HXLINE(2421)							spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            						}
HXLINE(2423)						bool _hx_tmp;
HXDLIN(2423)						if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2423)							_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            						}
            						else {
HXLINE(2423)							_hx_tmp = false;
            						}
HXDLIN(2423)						if (_hx_tmp) {
HXLINE(2425)							spr->centerOffsets(null());
HXLINE(2426)							{
HXLINE(2426)								 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(2426)								_g->set_x((_g->x - ( (Float)(13) )));
            							}
HXLINE(2427)							{
HXLINE(2427)								 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(2427)								_g1->set_y((_g1->y - ( (Float)(13) )));
            							}
            						}
            						else {
HXLINE(2430)							spr->centerOffsets(null());
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2394)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(2395)						_gthis->camZooming = true;
            					}
HXLINE(2397)					::String altAnim = HX_("",00,00,00,00);
HXLINE(2399)					if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(2401)						if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(2402)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(2405)					Float _hx_switch_3 = ::Math_obj::abs(( (Float)(daNote->noteData) ));
            					if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(2414)						::PlayState_obj::dad->playAnim((HX_("singLEFT",d6,39,ef,3b) + altAnim),true,null(),null());
HXDLIN(2414)						goto _hx_goto_76;
            					}
            					if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(2412)						::PlayState_obj::dad->playAnim((HX_("singDOWN",31,2a,ad,36) + altAnim),true,null(),null());
HXDLIN(2412)						goto _hx_goto_76;
            					}
            					if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(2408)						::PlayState_obj::dad->playAnim((HX_("singUP",6a,52,21,b9) + altAnim),true,null(),null());
HXDLIN(2408)						goto _hx_goto_76;
            					}
            					if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(2410)						::PlayState_obj::dad->playAnim((HX_("singRIGHT",0d,6f,70,ac) + altAnim),true,null(),null());
HXDLIN(2410)						goto _hx_goto_76;
            					}
            					_hx_goto_76:;
HXLINE(2417)					::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0(daNote)),null());
HXLINE(2434)					if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2435)						::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            					}
HXLINE(2438)					::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(2440)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2441)						_gthis->vocals->set_volume(( (Float)(1) ));
            					}
HXLINE(2443)					daNote->set_active(false);
HXLINE(2445)					daNote->kill();
HXLINE(2446)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2447)					daNote->destroy();
            				}
HXLINE(2450)				bool _hx_tmp1;
HXDLIN(2450)				if (daNote->mustPress) {
HXLINE(2450)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(2450)					_hx_tmp1 = false;
            				}
HXDLIN(2450)				if (_hx_tmp1) {
HXLINE(2452)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE(2453)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE(2454)					if (!(daNote->isSustainNote)) {
HXLINE(2455)						daNote->set_angle(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->angle);
            					}
HXLINE(2456)					daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->alpha);
            				}
            				else {
HXLINE(2458)					bool _hx_tmp;
HXDLIN(2458)					if (!(daNote->wasGoodHit)) {
HXLINE(2458)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(2458)						_hx_tmp = false;
            					}
HXDLIN(2458)					if (_hx_tmp) {
HXLINE(2460)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->visible);
HXLINE(2461)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x);
HXLINE(2462)						if (!(daNote->isSustainNote)) {
HXLINE(2463)							daNote->set_angle(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->angle);
            						}
HXLINE(2464)						daNote->set_alpha(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->alpha);
            					}
            				}
HXLINE(2469)				if (daNote->isSustainNote) {
HXLINE(2470)					 ::Note _g = daNote;
HXDLIN(2470)					Float _g1 = _g->x;
HXDLIN(2470)					_g->set_x((_g1 + ((daNote->get_width() / ( (Float)(2) )) + 17)));
            				}
HXLINE(2477)				bool _hx_tmp2;
HXDLIN(2477)				bool _hx_tmp3;
HXDLIN(2477)				bool _hx_tmp4;
HXDLIN(2477)				bool _hx_tmp5;
HXDLIN(2477)				if (daNote->mustPress) {
HXLINE(2477)					_hx_tmp5 = daNote->tooLate;
            				}
            				else {
HXLINE(2477)					_hx_tmp5 = false;
            				}
HXDLIN(2477)				if (_hx_tmp5) {
HXLINE(2477)					_hx_tmp4 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(2477)					_hx_tmp4 = false;
            				}
HXDLIN(2477)				if (!(_hx_tmp4)) {
HXLINE(2477)					bool _hx_tmp;
HXDLIN(2477)					if (daNote->mustPress) {
HXLINE(2477)						_hx_tmp = daNote->tooLate;
            					}
            					else {
HXLINE(2477)						_hx_tmp = false;
            					}
HXDLIN(2477)					if (_hx_tmp) {
HXLINE(2477)						_hx_tmp3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
            					}
            					else {
HXLINE(2477)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(2477)					_hx_tmp3 = true;
            				}
HXDLIN(2477)				if (_hx_tmp3) {
HXLINE(2477)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2477)					_hx_tmp2 = false;
            				}
HXDLIN(2477)				if (_hx_tmp2) {
HXLINE(2479)					bool _hx_tmp;
HXDLIN(2479)					if (daNote->isSustainNote) {
HXLINE(2479)						_hx_tmp = daNote->wasGoodHit;
            					}
            					else {
HXLINE(2479)						_hx_tmp = false;
            					}
HXDLIN(2479)					if (_hx_tmp) {
HXLINE(2481)						daNote->kill();
HXLINE(2482)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2483)						daNote->destroy();
            					}
            					else {
HXLINE(2487)						 ::PlayState _gthis1 = _gthis;
HXDLIN(2487)						_gthis1->health = (_gthis1->health - ((Float)0.075));
HXLINE(2488)						_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2489)						if (::PlayState_obj::theFunne) {
HXLINE(2490)							_gthis->noteMiss(daNote->noteData,daNote);
            						}
            					}
HXLINE(2493)					daNote->set_active(false);
HXLINE(2494)					daNote->set_visible(false);
HXLINE(2496)					daNote->kill();
HXLINE(2497)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2498)					daNote->destroy();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2308)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
HXLINE(2503)		::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(2512)		if (!(this->inCutscene)) {
HXLINE(2513)			this->keyShit();
            		}
            	}


void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2523_endSong)
HXLINE(2525)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE(2528)		doof->scrollFactor->set(null(),null());
HXLINE(2529)		doof->finishThing = this->startCountdown_dyn();
HXLINE(2530)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2532)		if (!(::PlayState_obj::loadRep)) {
HXLINE(2533)			::PlayState_obj::rep->SaveReplay(this->saveNotes);
            		}
            		else {
HXLINE(2536)			::flixel::FlxG_obj::save->data->__SetField(HX_("botplay",7b,fb,a9,61),false,::hx::paccDynamic);
HXLINE(2537)			::flixel::FlxG_obj::save->data->__SetField(HX_("scrollSpeed",3a,e0,46,cb),1,::hx::paccDynamic);
HXLINE(2538)			::flixel::FlxG_obj::save->data->__SetField(HX_("downscroll",ef,45,d4,4f),false,::hx::paccDynamic);
            		}
HXLINE(2541)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(2542)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(2545)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2547)			::PlayState_obj::luaModchart->die();
HXLINE(2548)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(2552)		this->canPause = false;
HXLINE(2553)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2554)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2555)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2558)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
            		}
HXLINE(2562)		if (::PlayState_obj::offsetTesting) {
HXLINE(2564)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2564)			::String library = null();
HXDLIN(2564)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(2565)			::PlayState_obj::offsetTesting = false;
HXLINE(2566)			{
HXLINE(2566)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2566)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2566)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2567)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(2571)			if (::PlayState_obj::isStoryMode) {
HXLINE(2573)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(2573)				::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(2575)				::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2577)				if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2582)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2582)					::String library = null();
HXDLIN(2582)					_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(2584)					this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2585)					this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(2587)					{
HXLINE(2587)						 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2587)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2587)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE(2590)					if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2592)						::PlayState_obj::luaModchart->die();
HXLINE(2593)						::PlayState_obj::luaModchart = null();
            					}
HXLINE(2598)					::StoryMenuState_obj::weekUnlocked[::Std_obj::_hx_int(::Math_obj::min(( (Float)((::PlayState_obj::storyWeek + 1)) ),( (Float)((::StoryMenuState_obj::weekUnlocked->length - 1)) )))] = true;
HXLINE(2600)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2602)						if (::NGio_obj::isLoggedIn) {
HXLINE(2602)							 ::io::newgrounds::objects::Medal medal = ( ( ::io::newgrounds::objects::Medal)(::io::newgrounds::NG_obj::core->medals->get(60961)) );
HXDLIN(2602)							if (!(( (bool)(medal->_data->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) ))) {
HXLINE(2602)								medal->sendUnlock();
            							}
            						}
HXLINE(2603)						::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            					}
HXLINE(2606)					::flixel::FlxG_obj::save->data->__SetField(HX_("weekUnlocked",37,64,c4,a5),::StoryMenuState_obj::weekUnlocked,::hx::paccDynamic);
HXLINE(2607)					::flixel::FlxG_obj::save->flush(null(),null());
            				}
            				else {
HXLINE(2611)					::String difficulty = HX_("",00,00,00,00);
HXLINE(2613)					if ((::PlayState_obj::storyDifficulty == 0)) {
HXLINE(2614)						difficulty = HX_("-easy",af,a6,14,2c);
            					}
HXLINE(2616)					if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(2617)						difficulty = HX_("-hard",98,49,10,2e);
            					}
HXLINE(2619)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),2619,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2620)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(2620)					::String _hx_tmp1 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2620)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),2620,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2622)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(2624)						 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(2624)						 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(2626)						blackShit1->scrollFactor->set(null(),null());
HXLINE(2627)						this->add(blackShit1);
HXLINE(2628)						this->camHUD->set_visible(false);
HXLINE(2630)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2630)						_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            					}
HXLINE(2633)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2634)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2635)					::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2637)					::String _hx_tmp2 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2637)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp2,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2638)					{
HXLINE(2638)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2638)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2640)					{
HXLINE(2640)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2640)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2640)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            			}
            			else {
HXLINE(2645)				::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),2645,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2646)				{
HXLINE(2646)					 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2646)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2646)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2661_popUpScore)
HXLINE(2660)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2662)		Float noteDiff = ::Math_obj::abs((::Conductor_obj::songPosition - daNote->strumTime));
HXLINE(2663)		Float wife = ::EtternaFunctions_obj::wife3(noteDiff,::Conductor_obj::timeScale);
HXLINE(2665)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2667)		::String placement = ::Std_obj::string(this->combo);
HXLINE(2669)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(2670)		coolText->screenCenter(null());
HXLINE(2671)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(2672)		{
HXLINE(2672)			 ::flixel::text::FlxText _g = coolText;
HXDLIN(2672)			_g->set_y((_g->y - ( (Float)(350) )));
            		}
HXLINE(2673)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2676)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2677)		Float score = ( (Float)(350) );
HXLINE(2679)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(2680)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2680)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(2682)		::String daRating = daNote->rating;
HXLINE(2684)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(2696)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(2697)			score = ( (Float)(0) );
HXLINE(2698)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2698)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
HXLINE(2699)			this->ss = false;
HXLINE(2700)			::PlayState_obj::bads++;
HXLINE(2701)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2702)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2702)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(2695)			goto _hx_goto_82;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(2704)			daRating = HX_("good",3d,95,69,44);
HXLINE(2705)			score = ( (Float)(200) );
HXLINE(2706)			this->ss = false;
HXLINE(2707)			::PlayState_obj::goods++;
HXLINE(2708)			if ((this->health < 2)) {
HXLINE(2709)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2709)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.04));
            			}
HXLINE(2710)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2711)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2711)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(2703)			goto _hx_goto_82;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2687)			score = ( (Float)(-300) );
HXLINE(2688)			this->combo = 0;
HXLINE(2689)			::PlayState_obj::misses++;
HXLINE(2690)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2690)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.2));
HXLINE(2691)			this->ss = false;
HXLINE(2692)			::PlayState_obj::shits++;
HXLINE(2693)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2694)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2694)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.25));
            			}
HXLINE(2686)			goto _hx_goto_82;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(2713)			if ((this->health < 2)) {
HXLINE(2714)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2714)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.1));
            			}
HXLINE(2715)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(2716)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2716)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(2717)			::PlayState_obj::sicks++;
HXLINE(2712)			goto _hx_goto_82;
            		}
            		_hx_goto_82:;
HXLINE(2722)		bool _hx_tmp;
HXDLIN(2722)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(2722)			_hx_tmp = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(2722)			_hx_tmp = true;
            		}
HXDLIN(2722)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2908_popUpScore)
HXLINE(2909)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2910)					 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(2910)					_g->set_alpha((_g->alpha - ((Float)0.02)));
            				}
HXLINE(2911)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2917_popUpScore)
HXLINE(2918)				coolText->destroy();
HXLINE(2919)				comboSpr1->destroy();
HXLINE(2920)				bool _hx_tmp;
HXDLIN(2920)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(2920)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(2920)					_hx_tmp = false;
            				}
HXDLIN(2920)				if (_hx_tmp) {
HXLINE(2922)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2923)					_gthis->currentTimingShown = null();
            				}
HXLINE(2925)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2726)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2726)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(2727)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2727)			int _hx_tmp2 = _hx_tmp1->songScoreDef;
HXDLIN(2727)			_hx_tmp1->songScoreDef = (_hx_tmp2 + ::Math_obj::round(( (Float)(::ConvertScore_obj::convertScore(noteDiff)) )));
HXLINE(2737)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(2738)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(2740)			if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(2742)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(2743)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
            			}
HXLINE(2746)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2746)			::String library = null();
HXDLIN(2746)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(2747)			rating->screenCenter(null());
HXLINE(2748)			{
HXLINE(2748)				 ::flixel::FlxSprite _g = rating;
HXDLIN(2748)				_g->set_y((_g->y - ( (Float)(50) )));
            			}
HXLINE(2749)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(2751)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(2753)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(2754)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(2756)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(2757)			{
HXLINE(2757)				 ::flixel::math::FlxPoint _g1 = rating->velocity;
HXDLIN(2757)				Float _g2 = _g1->y;
HXDLIN(2757)				_g1->set_y((_g2 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            			}
HXLINE(2758)			{
HXLINE(2758)				 ::flixel::math::FlxPoint _g3 = rating->velocity;
HXDLIN(2758)				Float _g4 = _g3->x;
HXDLIN(2758)				_g3->set_x((_g4 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            			}
HXLINE(2760)			Float msTiming = ::HelperFunctions_obj::truncateFloat(noteDiff,3);
HXLINE(2761)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(2761)				msTiming = ( (Float)(0) );
            			}
HXLINE(2763)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(2764)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(2766)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(2767)			this->timeShown = 0;
HXLINE(2768)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(2773)				this->currentTimingShown->set_color(-16744448);
HXDLIN(2773)				goto _hx_goto_83;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(2771)				this->currentTimingShown->set_color(-65536);
HXDLIN(2771)				goto _hx_goto_83;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(2775)				this->currentTimingShown->set_color(-16711681);
HXDLIN(2775)				goto _hx_goto_83;
            			}
            			_hx_goto_83:;
HXLINE(2777)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(2778)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(2779)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(2780)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(2781)			this->currentTimingShown->set_size(20);
HXLINE(2783)			bool _hx_tmp3;
HXDLIN(2783)			if ((msTiming >= ((Float)0.03))) {
HXLINE(2783)				_hx_tmp3 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(2783)				_hx_tmp3 = false;
            			}
HXDLIN(2783)			if (_hx_tmp3) {
HXLINE(2786)				this->hits->shift();
HXLINE(2787)				this->hits->shift();
HXLINE(2788)				this->hits->shift();
HXLINE(2789)				this->hits->pop();
HXLINE(2790)				this->hits->pop();
HXLINE(2791)				this->hits->pop();
HXLINE(2792)				this->hits->push(msTiming);
HXLINE(2794)				Float total = ((Float)0.0);
HXLINE(2796)				{
HXLINE(2796)					int _g = 0;
HXDLIN(2796)					::Array< Float > _g1 = this->hits;
HXDLIN(2796)					while((_g < _g1->length)){
HXLINE(2796)						Float i = _g1->__get(_g);
HXDLIN(2796)						_g = (_g + 1);
HXLINE(2797)						total = (total + i);
            					}
            				}
HXLINE(2801)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(2804)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(2805)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(2807)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2807)				this->add(this->currentTimingShown);
            			}
HXLINE(2809)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2809)			::String library1 = null();
HXDLIN(2809)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(2810)			comboSpr1->screenCenter(null());
HXLINE(2811)			comboSpr1->set_x(rating->x);
HXLINE(2812)			comboSpr1->set_y((rating->y + 100));
HXLINE(2813)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(2814)			{
HXLINE(2814)				 ::flixel::math::FlxPoint _g5 = comboSpr1->velocity;
HXDLIN(2814)				_g5->set_y((_g5->y - ( (Float)(150) )));
            			}
HXLINE(2816)			this->currentTimingShown->screenCenter(null());
HXLINE(2817)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(2818)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(2819)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(2820)			{
HXLINE(2820)				 ::flixel::math::FlxPoint _g6 = this->currentTimingShown->velocity;
HXDLIN(2820)				_g6->set_y((_g6->y - ( (Float)(150) )));
            			}
HXLINE(2822)			{
HXLINE(2822)				 ::flixel::math::FlxPoint _g7 = comboSpr1->velocity;
HXDLIN(2822)				Float _g8 = _g7->x;
HXDLIN(2822)				_g7->set_x((_g8 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            			}
HXLINE(2823)			{
HXLINE(2823)				 ::flixel::math::FlxPoint _g9 = this->currentTimingShown->velocity;
HXDLIN(2823)				_g9->set_x((_g9->x + comboSpr1->velocity->x));
            			}
HXLINE(2824)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ))) {
HXLINE(2824)				this->add(rating);
            			}
HXLINE(2826)			if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2828)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2828)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2829)				rating->set_antialiasing(true);
HXLINE(2830)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(2830)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(2831)				comboSpr1->set_antialiasing(true);
            			}
            			else {
HXLINE(2835)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2835)				Float _hx_tmp = rating->get_width();
HXDLIN(2835)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(2836)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(2836)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(2836)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(2839)			this->currentTimingShown->updateHitbox();
HXLINE(2840)			comboSpr1->updateHitbox();
HXLINE(2841)			rating->updateHitbox();
HXLINE(2843)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2844)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2845)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2847)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(2849)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(2851)			if ((comboSplit->length == 2)) {
HXLINE(2852)				seperatedScore->push(0);
            			}
HXLINE(2854)			{
HXLINE(2854)				int _g10 = 0;
HXDLIN(2854)				int _g11 = comboSplit->length;
HXDLIN(2854)				while((_g10 < _g11)){
HXLINE(2854)					_g10 = (_g10 + 1);
HXDLIN(2854)					int i = (_g10 - 1);
HXLINE(2856)					::String str = comboSplit->__get(i);
HXLINE(2857)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(2860)			int daLoop = 0;
HXLINE(2861)			{
HXLINE(2861)				int _g12 = 0;
HXDLIN(2861)				while((_g12 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2890_popUpScore)
HXLINE(2890)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2861)					int i = seperatedScore->__get(_g12);
HXDLIN(2861)					_g12 = (_g12 + 1);
HXLINE(2863)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2863)					::String library = null();
HXDLIN(2863)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(2864)					numScore1->screenCenter(null());
HXLINE(2865)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(2866)					numScore1->set_y((rating->y + 100));
HXLINE(2867)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2869)					if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2871)						numScore1->set_antialiasing(true);
HXLINE(2872)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(2872)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(2876)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(2876)						Float _hx_tmp = numScore1->get_width();
HXDLIN(2876)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(2878)					numScore1->updateHitbox();
HXLINE(2880)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(2880)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(2881)					{
HXLINE(2881)						 ::flixel::math::FlxPoint _g = numScore1->velocity;
HXDLIN(2881)						Float _g1 = _g->y;
HXDLIN(2881)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE(2882)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(2882)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(2884)					bool _hx_tmp;
HXDLIN(2884)					if ((this->combo < 10)) {
HXLINE(2884)						_hx_tmp = (this->combo == 0);
            					}
            					else {
HXLINE(2884)						_hx_tmp = true;
            					}
HXDLIN(2884)					if (_hx_tmp) {
HXLINE(2885)						this->add(numScore1);
            					}
HXLINE(2887)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
HXLINE(2895)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(2902)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(2902)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(2905)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis)))));
HXLINE(2915)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis,coolText,comboSpr1,rating)))));
HXLINE(2930)			 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2930)			_hx_tmp4->curSection = (_hx_tmp4->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2936_NearlyEquals)
HXDLIN(2936)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(2936)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3081_keyShit)
HXLINE(3081)			bool _hx_tmp;
HXDLIN(3081)			bool _hx_tmp1;
HXDLIN(3081)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(3081)				_hx_tmp1 = (daNote->y > _gthis->strumLine->y);
            			}
            			else {
HXLINE(3081)				_hx_tmp1 = false;
            			}
HXDLIN(3081)			if (!(_hx_tmp1)) {
HXLINE(3082)				if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) ))) {
HXLINE(3081)					_hx_tmp = (daNote->y < _gthis->strumLine->y);
            				}
            				else {
HXLINE(3081)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(3081)				_hx_tmp = true;
            			}
HXDLIN(3081)			if (_hx_tmp) {
HXLINE(3085)				bool _hx_tmp;
HXDLIN(3085)				bool _hx_tmp1;
HXDLIN(3085)				bool _hx_tmp2;
HXDLIN(3085)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(3085)					_hx_tmp2 = daNote->canBeHit;
            				}
            				else {
HXLINE(3085)					_hx_tmp2 = false;
            				}
HXDLIN(3085)				if (_hx_tmp2) {
HXLINE(3085)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(3085)					_hx_tmp1 = false;
            				}
HXDLIN(3085)				if (!(_hx_tmp1)) {
HXLINE(3086)					bool _hx_tmp1;
HXDLIN(3086)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(3086)						_hx_tmp1 = daNote->tooLate;
            					}
            					else {
HXLINE(3086)						_hx_tmp1 = false;
            					}
HXDLIN(3086)					if (_hx_tmp1) {
HXLINE(3085)						_hx_tmp = daNote->mustPress;
            					}
            					else {
HXLINE(3085)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(3085)					_hx_tmp = true;
            				}
HXDLIN(3085)				if (_hx_tmp) {
HXLINE(3088)					if (::PlayState_obj::loadRep) {
HXLINE(3091)						::Array< Float > _hx_tmp = ( (::Array< Float >)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(3091)						if (_hx_tmp->contains(::HelperFunctions_obj::truncateFloat(daNote->strumTime,2))) {
HXLINE(3093)							_gthis->goodNoteHit(daNote,null());
HXLINE(3094)							::PlayState_obj::boyfriend->holdTimer = daNote->sustainLength;
            						}
            					}
            					else {
HXLINE(3097)						_gthis->goodNoteHit(daNote,null());
HXLINE(3098)						::PlayState_obj::boyfriend->holdTimer = daNote->sustainLength;
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4,::Array< bool >,pressArray3,::Array< bool >,holdArray3) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3111_keyShit)
HXLINE(3112)			bool _hx_tmp;
HXDLIN(3112)			if (pressArray3->__get(spr->ID)) {
HXLINE(3112)				_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            			}
            			else {
HXLINE(3112)				_hx_tmp = false;
            			}
HXDLIN(3112)			if (_hx_tmp) {
HXLINE(3113)				spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            			}
HXLINE(3114)			if (!(holdArray3->__get(spr->ID))) {
HXLINE(3115)				spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            			}
HXLINE(3117)			bool _hx_tmp1;
HXDLIN(3117)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(3117)				_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            			}
            			else {
HXLINE(3117)				_hx_tmp1 = false;
            			}
HXDLIN(3117)			if (_hx_tmp1) {
HXLINE(3119)				spr->centerOffsets(null());
HXLINE(3120)				{
HXLINE(3120)					 ::flixel::math::FlxPoint _g = spr->offset;
HXDLIN(3120)					_g->set_x((_g->x - ( (Float)(13) )));
            				}
HXLINE(3121)				{
HXLINE(3121)					 ::flixel::math::FlxPoint _g1 = spr->offset;
HXDLIN(3121)					_g1->set_y((_g1->y - ( (Float)(13) )));
            				}
            			}
            			else {
HXLINE(3124)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2945_keyShit)
HXLINE(2944)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2947)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(2947)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(2947)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(2947)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(2949)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(2950)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(2951)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(2948)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(2955)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXLINE(2956)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXLINE(2957)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXLINE(2954)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(2962)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )) {
HXLINE(2964)			holdArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_101,4);
HXLINE(2965)			pressArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_102,4);
HXLINE(2966)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_103,4);
            		}
HXLINE(2969)		bool _hx_tmp;
HXDLIN(2969)		if (holdArray3->contains(true)) {
HXLINE(2969)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(2969)			_hx_tmp = false;
            		}
HXDLIN(2969)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2973_keyShit)
HXLINE(2973)				bool _hx_tmp;
HXDLIN(2973)				bool _hx_tmp1;
HXDLIN(2973)				bool _hx_tmp2;
HXDLIN(2973)				if (daNote->isSustainNote) {
HXLINE(2973)					_hx_tmp2 = daNote->canBeHit;
            				}
            				else {
HXLINE(2973)					_hx_tmp2 = false;
            				}
HXDLIN(2973)				if (_hx_tmp2) {
HXLINE(2973)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2973)					_hx_tmp1 = false;
            				}
HXDLIN(2973)				if (_hx_tmp1) {
HXLINE(2973)					_hx_tmp = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(2973)					_hx_tmp = false;
            				}
HXDLIN(2973)				if (_hx_tmp) {
HXLINE(2974)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2971)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(2979)		bool _hx_tmp1;
HXDLIN(2979)		if (pressArray3->contains(true)) {
HXLINE(2979)			_hx_tmp1 = this->generatedMusic;
            		}
            		else {
HXLINE(2979)			_hx_tmp1 = false;
            		}
HXDLIN(2979)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2989_keyShit)
HXLINE(2989)				bool _hx_tmp;
HXDLIN(2989)				bool _hx_tmp1;
HXDLIN(2989)				bool _hx_tmp2;
HXDLIN(2989)				if (daNote->canBeHit) {
HXLINE(2989)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2989)					_hx_tmp2 = false;
            				}
HXDLIN(2989)				if (_hx_tmp2) {
HXLINE(2989)					_hx_tmp1 = !(daNote->tooLate);
            				}
            				else {
HXLINE(2989)					_hx_tmp1 = false;
            				}
HXDLIN(2989)				if (_hx_tmp1) {
HXLINE(2989)					_hx_tmp = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(2989)					_hx_tmp = false;
            				}
HXDLIN(2989)				if (_hx_tmp) {
HXLINE(2991)					if (directionList->contains(daNote->noteData)) {
HXLINE(2993)						int _g = 0;
HXDLIN(2993)						while((_g < possibleNotes->length)){
HXLINE(2993)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2993)							_g = (_g + 1);
HXLINE(2995)							bool _hx_tmp;
HXDLIN(2995)							if ((coolNote->noteData == daNote->noteData)) {
HXLINE(2995)								_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            							}
            							else {
HXLINE(2995)								_hx_tmp = false;
            							}
HXDLIN(2995)							if (_hx_tmp) {
HXLINE(2998)								dumbNotes->push(daNote);
HXLINE(2999)								goto _hx_goto_92;
            							}
            							else {
HXLINE(3001)								bool _hx_tmp;
HXDLIN(3001)								if ((coolNote->noteData == daNote->noteData)) {
HXLINE(3001)									_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            								}
            								else {
HXLINE(3001)									_hx_tmp = false;
            								}
HXDLIN(3001)								if (_hx_tmp) {
HXLINE(3003)									possibleNotes->remove(coolNote);
HXLINE(3004)									possibleNotes->push(daNote);
HXLINE(3005)									goto _hx_goto_92;
            								}
            							}
            						}
            						_hx_goto_92:;
            					}
            					else {
HXLINE(3011)						possibleNotes->push(daNote);
HXLINE(3012)						directionList->push(daNote->noteData);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			int _hx_run( ::Note a, ::Note b){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3025_keyShit)
HXLINE(3025)				return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2981)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2983)			::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2984)			::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(2985)			::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2987)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList)),null());
HXLINE(3017)			{
HXLINE(3017)				int _g = 0;
HXDLIN(3017)				while((_g < dumbNotes->length)){
HXLINE(3017)					 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3017)					_g = (_g + 1);
HXLINE(3020)					note->kill();
HXLINE(3021)					this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3022)					note->destroy();
            				}
            			}
HXLINE(3025)			possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(3027)			bool dontCheck = false;
HXLINE(3029)			{
HXLINE(3029)				int _g1 = 0;
HXDLIN(3029)				int _g2 = pressArray3->length;
HXDLIN(3029)				while((_g1 < _g2)){
HXLINE(3029)					_g1 = (_g1 + 1);
HXDLIN(3029)					int i = (_g1 - 1);
HXLINE(3031)					bool _hx_tmp;
HXDLIN(3031)					if (pressArray3->__get(i)) {
HXLINE(3031)						_hx_tmp = !(directionList->contains(i));
            					}
            					else {
HXLINE(3031)						_hx_tmp = false;
            					}
HXDLIN(3031)					if (_hx_tmp) {
HXLINE(3032)						dontCheck = true;
            					}
            				}
            			}
HXLINE(3035)			if (this->perfectMode) {
HXLINE(3036)				this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            			}
            			else {
HXLINE(3037)				bool _hx_tmp;
HXDLIN(3037)				if ((possibleNotes->length > 0)) {
HXLINE(3037)					_hx_tmp = !(dontCheck);
            				}
            				else {
HXLINE(3037)					_hx_tmp = false;
            				}
HXDLIN(3037)				if (_hx_tmp) {
HXLINE(3039)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3041)						int _g = 0;
HXDLIN(3041)						int _g1 = pressArray3->length;
HXDLIN(3041)						while((_g < _g1)){
HXLINE(3041)							_g = (_g + 1);
HXDLIN(3041)							int shit = (_g - 1);
HXLINE(3043)							bool _hx_tmp;
HXDLIN(3043)							if (pressArray3->__get(shit)) {
HXLINE(3043)								_hx_tmp = !(directionList->contains(shit));
            							}
            							else {
HXLINE(3043)								_hx_tmp = false;
            							}
HXDLIN(3043)							if (_hx_tmp) {
HXLINE(3044)								this->noteMiss(shit,null());
            							}
            						}
            					}
HXLINE(3047)					{
HXLINE(3047)						int _g = 0;
HXDLIN(3047)						while((_g < possibleNotes->length)){
HXLINE(3047)							 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(3047)							_g = (_g + 1);
HXLINE(3049)							if (pressArray3->__get(coolNote->noteData)) {
HXLINE(3051)								if ((this->mashViolations != 0)) {
HXLINE(3052)									this->mashViolations--;
            								}
HXLINE(3053)								this->scoreTxt->set_color(-1);
HXLINE(3054)								this->goodNoteHit(coolNote,null());
            							}
            						}
            					}
            				}
            				else {
HXLINE(3058)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(3060)						int _g = 0;
HXDLIN(3060)						int _g1 = pressArray3->length;
HXDLIN(3060)						while((_g < _g1)){
HXLINE(3060)							_g = (_g + 1);
HXDLIN(3060)							int shit = (_g - 1);
HXLINE(3061)							if (pressArray3->__get(shit)) {
HXLINE(3062)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(3065)			bool _hx_tmp;
HXDLIN(3065)			bool _hx_tmp1;
HXDLIN(3065)			bool _hx_tmp2;
HXDLIN(3065)			if (dontCheck) {
HXLINE(3065)				_hx_tmp2 = (possibleNotes->length > 0);
            			}
            			else {
HXLINE(3065)				_hx_tmp2 = false;
            			}
HXDLIN(3065)			if (_hx_tmp2) {
HXLINE(3065)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(3065)				_hx_tmp1 = false;
            			}
HXDLIN(3065)			if (_hx_tmp1) {
HXLINE(3065)				_hx_tmp = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3065)				_hx_tmp = false;
            			}
HXDLIN(3065)			if (_hx_tmp) {
HXLINE(3067)				if ((this->mashViolations > 4)) {
HXLINE(3069)					::haxe::Log_obj::trace((HX_("mash violations ",7b,c3,a8,03) + this->mashViolations),::hx::SourceInfo(HX_("sourceGOAT/PlayState.hx",fa,04,09,b6),3069,HX_("PlayState",5d,83,c2,46),HX_("keyShit",ff,40,2c,a6)));
HXLINE(3070)					this->scoreTxt->set_color(-65536);
HXLINE(3071)					this->noteMiss(0,null());
            				}
            				else {
HXLINE(3074)					this->mashViolations++;
            				}
            			}
            		}
HXLINE(3079)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
HXLINE(3104)		bool _hx_tmp2;
HXDLIN(3104)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(3104)			if (holdArray3->contains(true)) {
HXLINE(3104)				_hx_tmp2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(3104)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(3104)			_hx_tmp2 = false;
            		}
HXDLIN(3104)		if (_hx_tmp2) {
HXLINE(3106)			bool _hx_tmp;
HXDLIN(3106)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(3106)				_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(3106)				_hx_tmp = false;
            			}
HXDLIN(3106)			if (_hx_tmp) {
HXLINE(3107)				::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
            		}
HXLINE(3110)		::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(pressArray3,holdArray3)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3130_noteMiss)
HXDLIN(3130)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(3132)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3132)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.04));
HXLINE(3133)			bool _hx_tmp1;
HXDLIN(3133)			if ((this->combo > 5)) {
HXLINE(3133)				_hx_tmp1 = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(3133)				_hx_tmp1 = false;
            			}
HXDLIN(3133)			if (_hx_tmp1) {
HXLINE(3135)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(3137)			this->combo = 0;
HXLINE(3138)			::PlayState_obj::misses++;
HXLINE(3143)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3144)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3144)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3146)			 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3146)			_hx_tmp2->songScore = (_hx_tmp2->songScore - 10);
HXLINE(3148)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(3148)			::String library = null();
HXDLIN(3148)			::String _hx_tmp4 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(3148)			_hx_tmp3->play(_hx_tmp4,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(3152)			switch((int)(direction)){
            				case (int)0: {
HXLINE(3155)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3157)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3159)					::PlayState_obj::boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3161)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            				}
            				break;
            			}
HXLINE(3165)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3166)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(3170)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3195_updateAccuracy)
HXLINE(3196)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3196)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(3197)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(3198)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3208_getKeyPresses)
HXLINE(3208)			bool _hx_tmp;
HXDLIN(3208)			bool _hx_tmp1;
HXDLIN(3208)			if (daNote->canBeHit) {
HXLINE(3208)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(3208)				_hx_tmp1 = false;
            			}
HXDLIN(3208)			if (_hx_tmp1) {
HXLINE(3208)				_hx_tmp = !(daNote->tooLate);
            			}
            			else {
HXLINE(3208)				_hx_tmp = false;
            			}
HXDLIN(3208)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3211_getKeyPresses)
HXLINE(3211)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(3210)				possibleNotes->push(daNote);
HXLINE(3211)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3203_getKeyPresses)
HXLINE(3204)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3206)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(3214)		if ((possibleNotes->length == 1)) {
HXLINE(3215)			return (possibleNotes->length + 1);
            		}
HXLINE(3216)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3225_noteCheck)
HXLINE(3226)		Float noteDiff = ::Math_obj::abs((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(3228)		note->rating = ::Ratings_obj::CalculateRating(noteDiff,null());
HXLINE(3243)		if (controlArray->__get(note->noteData)) {
HXLINE(3245)			int _hx_tmp = this->mashing;
HXDLIN(3245)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3272_goodNoteHit)
HXLINE(3274)		if ((this->mashing != 0)) {
HXLINE(3275)			this->mashing = 0;
            		}
HXLINE(3277)		Float noteDiff = ::Math_obj::abs((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(3279)		note->rating = ::Ratings_obj::CalculateRating(noteDiff,null());
HXLINE(3283)		if (!(note->isSustainNote)) {
HXLINE(3284)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(3284)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(3286)		bool _hx_tmp;
HXDLIN(3286)		if (!(resetMashViolation)) {
HXLINE(3286)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(3286)			_hx_tmp = false;
            		}
HXDLIN(3286)		if (_hx_tmp) {
HXLINE(3287)			this->mashViolations--;
            		}
HXLINE(3289)		if ((this->mashViolations < 0)) {
HXLINE(3290)			this->mashViolations = 0;
            		}
HXLINE(3292)		if (!(note->wasGoodHit)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,note) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3326_goodNoteHit)
HXLINE(3326)				if ((::Math_obj::abs(( (Float)(note->noteData) )) == spr->ID)) {
HXLINE(3328)					spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3294)			if (!(note->isSustainNote)) {
HXLINE(3296)				this->popUpScore(note);
HXLINE(3297)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3297)				_hx_tmp->combo = (_hx_tmp->combo + 1);
            			}
            			else {
HXLINE(3300)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3300)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3303)			switch((int)(note->noteData)){
            				case (int)0: {
HXLINE(3312)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFT",d6,39,ef,3b),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(3310)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWN",31,2a,ad,36),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(3306)					::PlayState_obj::boyfriend->playAnim(HX_("singUP",6a,52,21,b9),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(3308)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHT",0d,6f,70,ac),true,null(),null());
            				}
            				break;
            			}
HXLINE(3316)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3317)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(3321)			bool _hx_tmp;
HXDLIN(3321)			if (!(::PlayState_obj::loadRep)) {
HXLINE(3321)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(3321)				_hx_tmp = false;
            			}
HXDLIN(3321)			if (_hx_tmp) {
HXLINE(3322)				::Array< Float > _hx_tmp = this->saveNotes;
HXDLIN(3322)				_hx_tmp->push(::HelperFunctions_obj::truncateFloat(note->strumTime,2));
            			}
HXLINE(3324)			::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(note)),null());
HXLINE(3332)			note->wasGoodHit = true;
HXLINE(3333)			this->vocals->set_volume(( (Float)(1) ));
HXLINE(3335)			note->kill();
HXLINE(3336)			this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(3337)			note->destroy();
HXLINE(3339)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3348_resetFastCar)
HXDLIN(3348)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3349)			this->fastCar->set_x(( (Float)(-12600) ));
HXLINE(3350)			 ::flixel::FlxSprite _hx_tmp = this->fastCar;
HXDLIN(3350)			_hx_tmp->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(140,250,null())) ));
HXLINE(3351)			this->fastCar->velocity->set_x(( (Float)(0) ));
HXLINE(3352)			this->fastCarCanDrive = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3357_fastCarDrive)
HXLINE(3356)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3358)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3365_fastCarDrive)
HXLINE(3365)				_gthis->resetFastCar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3359)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3359)			::String library = null();
HXDLIN(3359)			_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),library),((Float)0.7),null(),null(),null(),null());
HXLINE(3361)			 ::flixel::math::FlxPoint _hx_tmp1 = this->fastCar->velocity;
HXDLIN(3361)			int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(3361)			_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )));
HXLINE(3362)			this->fastCarCanDrive = false;
HXLINE(3363)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3379_trainStart)
HXDLIN(3379)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3380)			this->trainMoving = true;
HXLINE(3381)			if (::hx::IsNull( this->trainSound->_channel )) {
HXLINE(3382)				this->trainSound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3390_updateTrainPos)
HXDLIN(3390)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3391)			if ((this->trainSound->_time >= 4700)) {
HXLINE(3393)				this->startedMoving = true;
HXLINE(3394)				::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            			}
HXLINE(3397)			if (this->startedMoving) {
HXLINE(3399)				{
HXLINE(3399)					 ::flixel::FlxSprite _g = this->phillyTrain;
HXDLIN(3399)					_g->set_x((_g->x - ( (Float)(400) )));
            				}
HXLINE(3401)				bool _hx_tmp;
HXDLIN(3401)				if ((this->phillyTrain->x < -2000)) {
HXLINE(3401)					_hx_tmp = !(this->trainFinishing);
            				}
            				else {
HXLINE(3401)					_hx_tmp = false;
            				}
HXDLIN(3401)				if (_hx_tmp) {
HXLINE(3403)					this->phillyTrain->set_x(( (Float)(-1150) ));
HXLINE(3404)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3404)					_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(3406)					if ((this->trainCars <= 0)) {
HXLINE(3407)						this->trainFinishing = true;
            					}
            				}
HXLINE(3410)				bool _hx_tmp1;
HXDLIN(3410)				if ((this->phillyTrain->x < -4000)) {
HXLINE(3410)					_hx_tmp1 = this->trainFinishing;
            				}
            				else {
HXLINE(3410)					_hx_tmp1 = false;
            				}
HXDLIN(3410)				if (_hx_tmp1) {
HXLINE(3411)					this->trainReset();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3419_trainReset)
HXDLIN(3419)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3420)			::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(3421)			this->phillyTrain->set_x(( (Float)((::flixel::FlxG_obj::width + 200)) ));
HXLINE(3422)			this->trainMoving = false;
HXLINE(3425)			this->trainCars = 8;
HXLINE(3426)			this->trainFinishing = false;
HXLINE(3427)			this->startedMoving = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3432_lightningStrikeShit)
HXLINE(3433)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3433)		::String library = null();
HXDLIN(3433)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),library),null(),null(),null(),null(),null());
HXLINE(3434)		this->halloweenBG->animation->play(HX_("lightning",0a,39,4a,d7),null(),null(),null());
HXLINE(3436)		this->lightningStrikeBeat = this->curBeat;
HXLINE(3437)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(3439)		::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(3440)		::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3444_stepHit)
HXLINE(3445)		this->super::stepHit();
HXLINE(3446)		bool _hx_tmp;
HXDLIN(3446)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(3446)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(3446)			_hx_tmp = true;
            		}
HXDLIN(3446)		if (_hx_tmp) {
HXLINE(3448)			this->resyncVocals();
            		}
HXLINE(3452)		bool _hx_tmp1;
HXDLIN(3452)		if (this->executeModchart) {
HXLINE(3452)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(3452)			_hx_tmp1 = false;
            		}
HXDLIN(3452)		if (_hx_tmp1) {
HXLINE(3454)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(3455)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
HXLINE(3459)		bool _hx_tmp2;
HXDLIN(3459)		if ((::PlayState_obj::dad->curCharacter == HX_("spooky",eb,bd,9e,c1))) {
HXLINE(3459)			_hx_tmp2 = (::hx::Mod(this->curStep,4) == 2);
            		}
            		else {
HXLINE(3459)			_hx_tmp2 = false;
            		}
HXLINE(3470)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(3473)		::String _hx_tmp3 = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(3473)		::String _hx_tmp4 = (_hx_tmp3 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(3473)		::String _hx_tmp5 = ((HX_("Acc: ",07,26,c7,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXDLIN(3473)		::DiscordClient_obj::changePresence(_hx_tmp4,(((_hx_tmp5 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3482_beatHit)
HXLINE(3483)		this->super::beatHit();
HXLINE(3485)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3487_beatHit)
HXLINE(3487)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(3487)			int Order;
HXDLIN(3487)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(3487)				Order = -1;
            			}
            			else {
HXLINE(3487)				Order = 1;
            			}
HXDLIN(3487)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(3487)			int a1 = Order;
HXDLIN(3487)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(3487)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(3491)		bool _hx_tmp;
HXDLIN(3491)		if (this->executeModchart) {
HXLINE(3491)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(3491)			_hx_tmp = false;
            		}
HXDLIN(3491)		if (_hx_tmp) {
HXLINE(3493)			::PlayState_obj::luaModchart->setVar(HX_("curBeat",16,53,29,ac),this->curBeat);
HXLINE(3494)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(3498)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(3500)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(3502)				::Conductor_obj::changeBPM(( (int)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
HXLINE(3509)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(3510)				::PlayState_obj::dad->dance();
            			}
            		}
HXLINE(3513)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(3516)		bool _hx_tmp1;
HXDLIN(3516)		bool _hx_tmp2;
HXDLIN(3516)		bool _hx_tmp3;
HXDLIN(3516)		bool _hx_tmp4;
HXDLIN(3516)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(3516)			_hx_tmp4 = (this->curBeat >= 168);
            		}
            		else {
HXLINE(3516)			_hx_tmp4 = false;
            		}
HXDLIN(3516)		if (_hx_tmp4) {
HXLINE(3516)			_hx_tmp3 = (this->curBeat < 200);
            		}
            		else {
HXLINE(3516)			_hx_tmp3 = false;
            		}
HXDLIN(3516)		if (_hx_tmp3) {
HXLINE(3516)			_hx_tmp2 = this->camZooming;
            		}
            		else {
HXLINE(3516)			_hx_tmp2 = false;
            		}
HXDLIN(3516)		if (_hx_tmp2) {
HXLINE(3516)			_hx_tmp1 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3516)			_hx_tmp1 = false;
            		}
HXDLIN(3516)		if (_hx_tmp1) {
HXLINE(3518)			{
HXLINE(3518)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(3518)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(3519)			{
HXLINE(3519)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(3519)				_g1->set_zoom((_g1->zoom + ((Float)0.03)));
            			}
            		}
HXLINE(3522)		bool _hx_tmp5;
HXDLIN(3522)		bool _hx_tmp6;
HXDLIN(3522)		if (this->camZooming) {
HXLINE(3522)			_hx_tmp6 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(3522)			_hx_tmp6 = false;
            		}
HXDLIN(3522)		if (_hx_tmp6) {
HXLINE(3522)			_hx_tmp5 = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(3522)			_hx_tmp5 = false;
            		}
HXDLIN(3522)		if (_hx_tmp5) {
HXLINE(3524)			{
HXLINE(3524)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(3524)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(3525)			{
HXLINE(3525)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(3525)				_g1->set_zoom((_g1->zoom + ((Float)0.03)));
            			}
            		}
HXLINE(3528)		 ::HealthIcon _hx_tmp7 = this->iconP1;
HXDLIN(3528)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(3529)		 ::HealthIcon _hx_tmp8 = this->iconP2;
HXDLIN(3529)		_hx_tmp8->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(3531)		this->iconP1->updateHitbox();
HXLINE(3532)		this->iconP2->updateHitbox();
HXLINE(3534)		if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(3536)			::PlayState_obj::gf->dance();
            		}
HXLINE(3539)		if (!(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(3541)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(3544)		if (!(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(3546)			::PlayState_obj::dad->dance();
            		}
HXLINE(3549)		bool _hx_tmp9;
HXDLIN(3549)		if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(3549)			_hx_tmp9 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            		}
            		else {
HXLINE(3549)			_hx_tmp9 = false;
            		}
HXDLIN(3549)		if (_hx_tmp9) {
HXLINE(3551)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            		}
HXLINE(3554)		bool _hx_tmp10;
HXDLIN(3554)		bool _hx_tmp11;
HXDLIN(3554)		bool _hx_tmp12;
HXDLIN(3554)		bool _hx_tmp13;
HXDLIN(3554)		if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(3554)			_hx_tmp13 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            		}
            		else {
HXLINE(3554)			_hx_tmp13 = false;
            		}
HXDLIN(3554)		if (_hx_tmp13) {
HXLINE(3554)			_hx_tmp12 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(3554)			_hx_tmp12 = false;
            		}
HXDLIN(3554)		if (_hx_tmp12) {
HXLINE(3554)			_hx_tmp11 = (this->curBeat > 16);
            		}
            		else {
HXLINE(3554)			_hx_tmp11 = false;
            		}
HXDLIN(3554)		if (_hx_tmp11) {
HXLINE(3554)			_hx_tmp10 = (this->curBeat < 48);
            		}
            		else {
HXLINE(3554)			_hx_tmp10 = false;
            		}
HXDLIN(3554)		if (_hx_tmp10) {
HXLINE(3556)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(3557)			::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            		}
HXLINE(3560)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("bungerTime",e6,3c,36,91)) ){
HXLINE(3575)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3576)				this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3577)				this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
            			}
HXLINE(3575)			goto _hx_goto_123;
            		}
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE(3581)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            				void _hx_run( ::BackgroundDancer dancer){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3584_beatHit)
HXLINE(3584)					dancer->dance();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3582)				this->grpLimoDancers->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(3587)				bool _hx_tmp;
HXDLIN(3587)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(3587)					_hx_tmp = this->fastCarCanDrive;
            				}
            				else {
HXLINE(3587)					_hx_tmp = false;
            				}
HXDLIN(3587)				if (_hx_tmp) {
HXLINE(3588)					this->fastCarDrive();
            				}
            			}
HXLINE(3581)			goto _hx_goto_123;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(3568)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3569)				this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3570)				this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(3571)				this->santa->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            			}
HXLINE(3568)			goto _hx_goto_123;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(3591)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3592)				if (!(this->trainMoving)) {
HXLINE(3593)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3593)					_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            				}
HXLINE(3595)				if ((::hx::Mod(this->curBeat,4) == 0)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite light){
            						HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3599_beatHit)
HXLINE(3599)						light->set_visible(false);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3597)					this->phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(3602)					this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyCityLights->length - 1),null());
HXLINE(3604)					Dynamic( this->phillyCityLights->members->__get(this->curLight)).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            				}
            			}
HXLINE(3610)			bool _hx_tmp;
HXDLIN(3610)			bool _hx_tmp1;
HXDLIN(3610)			bool _hx_tmp2;
HXDLIN(3610)			if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(3610)				_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            			}
            			else {
HXLINE(3610)				_hx_tmp2 = false;
            			}
HXDLIN(3610)			if (_hx_tmp2) {
HXLINE(3610)				_hx_tmp1 = !(this->trainMoving);
            			}
            			else {
HXLINE(3610)				_hx_tmp1 = false;
            			}
HXDLIN(3610)			if (_hx_tmp1) {
HXLINE(3610)				_hx_tmp = (this->trainCooldown > 8);
            			}
            			else {
HXLINE(3610)				_hx_tmp = false;
            			}
HXDLIN(3610)			if (_hx_tmp) {
HXLINE(3612)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3613)					this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(3614)					this->trainStart();
            				}
            			}
HXLINE(3590)			goto _hx_goto_123;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(3563)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3564)				this->bgGirls->dance();
            			}
HXLINE(3563)			goto _hx_goto_123;
            		}
            		_hx_goto_123:;
HXLINE(3619)		bool _hx_tmp14;
HXDLIN(3619)		bool _hx_tmp15;
HXDLIN(3619)		if (this->isHalloween) {
HXLINE(3619)			_hx_tmp15 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10);
            		}
            		else {
HXLINE(3619)			_hx_tmp15 = false;
            		}
HXDLIN(3619)		if (_hx_tmp15) {
HXLINE(3619)			_hx_tmp14 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            		}
            		else {
HXLINE(3619)			_hx_tmp14 = false;
            		}
HXDLIN(3619)		if (_hx_tmp14) {
HXLINE(3621)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(3622)				this->lightningStrikeShit();
            			}
            		}
            	}


 ::PlayState PlayState_obj::instance;

::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

::Array< bool > PlayState_obj::noteBools;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

bool PlayState_obj::offsetTesting;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

bool PlayState_obj::theFunne;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

Float PlayState_obj::songOffset;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songRate;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_MARK_MEMBER_NAME(isHalloween,"isHalloween");
	HX_MARK_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(limo,"limo");
	HX_MARK_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_MARK_MEMBER_NAME(fastCar,"fastCar");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_MARK_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_MARK_MEMBER_NAME(santa,"santa");
	HX_MARK_MEMBER_NAME(frontDancers,"frontDancers");
	HX_MARK_MEMBER_NAME(backDancers,"backDancers");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(bgGirls,"bgGirls");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_VISIT_MEMBER_NAME(isHalloween,"isHalloween");
	HX_VISIT_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(limo,"limo");
	HX_VISIT_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_VISIT_MEMBER_NAME(fastCar,"fastCar");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_VISIT_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_VISIT_MEMBER_NAME(santa,"santa");
	HX_VISIT_MEMBER_NAME(frontDancers,"frontDancers");
	HX_VISIT_MEMBER_NAME(backDancers,"backDancers");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(bgGirls,"bgGirls");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { return ::hx::Val( limo ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"santa") ) { return ::hx::Val( santa ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"fastCar") ) { return ::hx::Val( fastCar ); }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { return ::hx::Val( bgGirls ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { return ::hx::Val( halloweenBG ); }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { return ::hx::Val( isHalloween ); }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"backDancers") ) { return ::hx::Val( backDancers ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { return ::hx::Val( upperBoppers ); }
		if (HX_FIELD_EQ(inName,"frontDancers") ) { return ::hx::Val( frontDancers ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { return ::hx::Val( bottomBoppers ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { return ::hx::Val( grpLimoDancers ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { return ::hx::Val( phillyCityLights ); }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { return ::hx::Val( kadeEngineWatermark ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { outValue = ( songRate ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { limo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"santa") ) { santa=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCar") ) { fastCar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { bgGirls=inValue.Cast<  ::BackgroundGirls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { halloweenBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { isHalloween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backDancers") ) { backDancers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { upperBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frontDancers") ) { frontDancers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { bottomBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { grpLimoDancers=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { phillyCityLights=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { kadeEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { songRate=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("kadeEngineWatermark",ab,82,ba,66));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("halloweenBG",92,b2,88,5c));
	outFields->push(HX_("isHalloween",43,72,b9,2e));
	outFields->push(HX_("phillyCityLights",30,e0,12,1f));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("limo",1f,17,b3,47));
	outFields->push(HX_("grpLimoDancers",70,18,93,51));
	outFields->push(HX_("fastCar",d8,f2,1f,de));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("upperBoppers",37,47,71,21));
	outFields->push(HX_("bottomBoppers",ce,2c,ba,6e));
	outFields->push(HX_("santa",8d,45,86,77));
	outFields->push(HX_("frontDancers",0b,c0,54,f0));
	outFields->push(HX_("backDancers",4d,4a,f0,18));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("bgGirls",92,16,2b,41));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PlayState_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,kadeEngineWatermark),HX_("kadeEngineWatermark",ab,82,ba,66)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,halloweenBG),HX_("halloweenBG",92,b2,88,5c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isHalloween),HX_("isHalloween",43,72,b9,2e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,phillyCityLights),HX_("phillyCityLights",30,e0,12,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,limo),HX_("limo",1f,17,b3,47)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpLimoDancers),HX_("grpLimoDancers",70,18,93,51)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,fastCar),HX_("fastCar",d8,f2,1f,de)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,upperBoppers),HX_("upperBoppers",37,47,71,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bottomBoppers),HX_("bottomBoppers",ce,2c,ba,6e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,santa),HX_("santa",8d,45,86,77)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,frontDancers),HX_("frontDancers",0b,c0,54,f0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,backDancers),HX_("backDancers",4d,4a,f0,18)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::BackgroundGirls */ ,(int)offsetof(PlayState_obj,bgGirls),HX_("bgGirls",92,16,2b,41)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songRate,HX_("songRate",55,b1,7c,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("songLength",9b,3a,8c,fa),
	HX_("kadeEngineWatermark",ab,82,ba,66),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("dialogue",18,2d,94,a7),
	HX_("halloweenBG",92,b2,88,5c),
	HX_("isHalloween",43,72,b9,2e),
	HX_("phillyCityLights",30,e0,12,1f),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("trainSound",e7,b3,e5,da),
	HX_("limo",1f,17,b3,47),
	HX_("grpLimoDancers",70,18,93,51),
	HX_("fastCar",d8,f2,1f,de),
	HX_("songName",c0,d0,d7,36),
	HX_("upperBoppers",37,47,71,21),
	HX_("bottomBoppers",ce,2c,ba,6e),
	HX_("santa",8d,45,86,77),
	HX_("frontDancers",0b,c0,54,f0),
	HX_("backDancers",4d,4a,f0,18),
	HX_("fc",3d,59,00,00),
	HX_("bgGirls",92,16,2b,41),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("executeModchart",31,4a,80,b8),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("songStarted",ec,81,a7,ed),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("update",09,86,05,87),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("noteMiss",0e,78,8f,57),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songRate,"songRate");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songRate,"songRate");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("noteBools",b7,6b,85,f4),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("theFunne",05,d0,55,cd),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("songOffset",48,3d,c4,bb),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songRate",55,b1,7c,39),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_69_boot)
HXDLIN(  69)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_71_boot)
HXDLIN(  71)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_73_boot)
HXDLIN(  73)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_74_boot)
HXDLIN(  74)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_75_boot)
HXDLIN(  75)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_76_boot)
HXDLIN(  76)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_77_boot)
HXDLIN(  77)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_78_boot)
HXDLIN(  78)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_79_boot)
HXDLIN(  79)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_80_boot)
HXDLIN(  80)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_boot)
HXDLIN(  81)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_87_boot)
HXDLIN(  87)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_89_boot)
HXDLIN(  89)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_141,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_120_boot)
HXDLIN( 120)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_121_boot)
HXDLIN( 121)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_122_boot)
HXDLIN( 122)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_130_boot)
HXDLIN( 130)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_151_boot)
HXDLIN( 151)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_187_boot)
HXDLIN( 187)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_191_boot)
HXDLIN( 191)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_193_boot)
HXDLIN( 193)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_196_boot)
HXDLIN( 196)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_197_boot)
HXDLIN( 197)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_199_boot)
HXDLIN( 199)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_200_boot)
HXDLIN( 200)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_208_boot)
HXDLIN( 208)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1264_boot)
HXDLIN(1264)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1802_boot)
HXDLIN(1802)		songRate = ((Float)1.5);
            	}
}

